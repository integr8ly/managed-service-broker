{
    "address": {
        "anycast": {
            "label": "A scalable 'direct' address for sending messages to one consumer",
            "plan": {
                "inmemory": {
                    "label": "Configures router network with anycast address"
                }
            },
            "tooltip": "The `anycast` address type is a scalable 'direct' address for sending messages to one consumer. Messages sent to an `anycast` address is not stored but forwarded directly to the consumer. This makes this address type ideal for request-reply (RPC) uses or even work distribution. This is the cheapest address type as it doesn't require any persistence."
        },
        "multicast": {
            "label": "A scalable 'direct' address for sending messages to multiple consumers",
            "plan": {
                "inmemory": {
                    "label": "Configures router network with multicast address"
                }
            },
            "tooltip": "The `broadcast` address type is a scalable 'direct' address for sending messages to multiple consumers. Messages sent to a `broadcast` address are forwarded to all consumers receiving on that address. It is important to note that only pre-settled messages can be sent to broadcast addresses, as message acknowledgements from consumers are not propagated to producers."
        },
        "name": {
            "external": "https://github.com/EnMasseProject/enmasse/pull/44",
            "label": "Enter the address name",
            "tooltip": "The <b>address name</b> is a unique string to which messages can be sent and received."
        },
        "queue": {
            "label": "A store-and-forward queue",
            "plan": {
                "inmemory": {
                    "label": "In memory only",
                    "tooltip": "Creates a standalone broker cluster for queues. Messages are not persisted on stable storage."
                },
                "persisted": {
                    "label": "Saved to storage",
                    "tooltip": "Creates a standalone broker cluster for queues. Messages are persisted on stable storage."
                },
                "pooled-inmemory": {
                    "label": "Shared broker cluster - not persisted",
                    "tooltip": "Schedules queues to run on a shared broker cluster, reducing overhead. Messages are not persisted on stable storage."
                },
                "pooled-persisted": {
                    "label": "Shared broker cluster - saved to storage",
                    "tooltip": "Schedules queues to run on a shared broker cluster, reducing overhead. Messages are persisted on stable storage."
                }
            },
            "tooltip": "end"
        },
        "topic": {
            "label": "A publish-subscriber topic",
            "plan": {
                "inmemory": {
                    "label": "In memory only",
                    "tooltip": "Creates a standalone broker cluster for topics. Messages are not persisted on stable storage."
                },
                "persisted": {
                    "label": "Saved to storage",
                    "tooltip": "Creates a standalone broker cluster for topics. Messages are persisted on stable storage."
                }
            },
            "tooltip": "The `topic` address type supports the publish-subscribe messaging pattern where you have 1..N producers and 1..M consumers. Each message published to a topic address is forwarded to all subscribers for that address. A subscriber may also be durable, in which case messages are kept until the subscriber has acknowledged them."
        }
    }
}
