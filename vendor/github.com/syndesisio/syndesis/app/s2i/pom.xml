<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (C) 2016 Red Hat, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>io.syndesis</groupId>
    <artifactId>syndesis-parent</artifactId>
    <version>1.8.12</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <groupId>io.syndesis.s2i</groupId>
  <artifactId>s2i</artifactId>
  <version>1.8.12</version>
  <packaging>pom</packaging>
  <name>S2I</name>

  <properties>
    <!-- Must be set empty here so that it can be overridden from the outside-->
    <!-- Don't delete this line -->
    <maven.repo.local></maven.repo.local>
    <s2i.sample-generation.skip>false</s2i.sample-generation.skip>
    <s2i.local-repo-generation.skip>false</s2i.local-repo-generation.skip>
    <license.dir>${project.basedir}/src/main/resources/licenses</license.dir>
    <license.output.dir>${project.build.directory}/licenses</license.output.dir>
  </properties>

  <dependencies>
    <dependency>
      <groupId>io.syndesis.server</groupId>
      <artifactId>server-builder-image-generator</artifactId>
      <version>${project.version}</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>copy</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <skip>false</skip>
          <artifactItems>
            <artifactItem>
              <groupId>io.syndesis.server</groupId>
              <artifactId>server-builder-image-generator</artifactId>
              <version>${project.version}</version>
              <type>jar</type>
              <outputDirectory>${project.build.directory}</outputDirectory>
              <destFileName>rest-builder-image-generator.jar</destFileName>
            </artifactItem>
          </artifactItems>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-resources</id>
            <phase>validate</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${basedir}/target/generated-sources/docker</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/resources</directory>
                  <excludes>
                    <exclude>settings.xml</exclude>
                  </excludes>
                </resource>
                <resource>
                  <directory>src/main/resources</directory>
                  <includes>
                    <include>settings.xml</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <executions>
          <execution>
            <!-- Generate a sample project with an integration which contains
                 all defined connectors (as declared in deployment.json)
                 This project is build later when the Dockerfile is created.
                 See comments in Dockerfile for more details -->
            <id>rest-builder-image-generator</id>
            <phase>package</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <skip>${s2i.sample-generation.skip}</skip>
              <executable>java</executable>
              <arguments>
                <argument>-jar</argument>
                <argument>${project.build.directory}/rest-builder-image-generator.jar</argument>
                <argument>--to=${basedir}/target/generated-sources/docker/m2/project</argument>
              </arguments>
            </configuration>
          </execution>
          <execution>
            <id>copy-local-repo</id>
            <phase>package</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <skip>${s2i.local-repo-generation.skip}</skip>
              <executable>bash</executable>
              <commandlineArgs>
                ${basedir}/copy_mvn_repo.sh
                ${project.basedir}
                ${project.version}
                ${basedir}/target/generated-sources/docker
                ${maven.repo.local}
              </commandlineArgs>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>addrepository</id>
      <activation>
        <property>
          <name>addrepository</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-assembly-plugin</artifactId>
            <configuration>
              <descriptors>
                <descriptor>src/main/assembly/repository.xml</descriptor>
              </descriptors>
            </configuration>
            <executions>
              <execution>
                <id>make-repository-assembly</id>
                <phase>package</phase>
                <goals>
                  <goal>single</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>image</id>
      <activation>
        <property>
          <name>::image</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>fabric8-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>exec</id>
                <phase>package</phase>
                <goals>
                  <goal>build</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <!-- Important here, otherwise fmp silently ignores the build config -->
              <skipBuildPom>false</skipBuildPom>
              <verbose>true</verbose>
              <!-- Create a plain Docker image -->
              <buildStrategy>docker</buildStrategy>
              <images>
                <image>
                  <name>${image.s2i}</name>
                  <build>
                    <dockerFileDir>${basedir}/target/generated-sources/docker</dockerFileDir>
                  </build>
                </image>
              </images>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>generate-licenses-xml</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>license-maven-plugin</artifactId>
            <executions>
              <execution>
                <goals>
                  <goal>aggregate-download-licenses</goal>
                </goals>
                <phase>generate-resources</phase>
                <configuration>
                  <licensesOutputDirectory>${license.dir}/licenses</licensesOutputDirectory>
                  <licensesOutputFile>${license.dir}/licenses.xml</licensesOutputFile>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>mavenMirror</id>
      <activation>
        <property>
          <name>mavenMirror</name>
        </property>
      </activation>
      <properties>
        <mavenMirrorOf>external:*</mavenMirrorOf>
      </properties>
    </profile>
    <!-- Build by PNC -->
    <profile>
      <id>with-proxy</id>
      <activation>
        <property>
          <name>proxy-server</name>
        </property>
      </activation>
      <properties>
        <s2i.sample-generation.skip>true</s2i.sample-generation.skip>
        <s2i.local-repo-generation.skip>true</s2i.local-repo-generation.skip>
      </properties>
    </profile>
  </profiles>
</project>
