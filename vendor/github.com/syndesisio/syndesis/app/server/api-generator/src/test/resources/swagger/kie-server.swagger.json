{
  "basePath": "/kie-server/services/rest",
  "definitions": {
    "ScoreWrapper": {
      "properties": {
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "case-adhoc-fragment": {
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "case-adhoc-fragment"
      }
    },
    "case-adhoc-fragment-list": {
      "properties": {
        "fragments": {
          "items": {
            "$ref": "#/definitions/case-adhoc-fragment",
            "xml": {
              "name": "fragments"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "case-adhoc-fragment-list"
      }
    },
    "case-comment": {
      "properties": {
        "added-at": {
          "format": "date-time",
          "type": "string"
        },
        "author": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "restricted-to": {
          "items": {
            "type": "string",
            "xml": {
              "name": "restricted-to"
            }
          },
          "type": "array"
        },
        "text": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "case-comment"
      }
    },
    "case-comment-list": {
      "properties": {
        "comments": {
          "items": {
            "$ref": "#/definitions/case-comment",
            "xml": {
              "name": "comments"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "case-comment-list"
      }
    },
    "case-definition": {
      "properties": {
        "adhoc-fragments": {
          "items": {
            "$ref": "#/definitions/case-adhoc-fragment",
            "xml": {
              "name": "adhoc-fragments"
            }
          },
          "type": "array"
        },
        "case-id-prefix": {
          "type": "string"
        },
        "container-id": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "milestones": {
          "items": {
            "$ref": "#/definitions/case-milestone-def",
            "xml": {
              "name": "milestones"
            }
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "roles": {
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          },
          "type": "object"
        },
        "stages": {
          "items": {
            "$ref": "#/definitions/case-stage-def",
            "xml": {
              "name": "stages"
            }
          },
          "type": "array"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "case-definition"
      }
    },
    "case-definition-list": {
      "properties": {
        "definitions": {
          "items": {
            "$ref": "#/definitions/case-definition",
            "xml": {
              "name": "definitions"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "case-definition-list"
      }
    },
    "case-file": {
      "properties": {
        "case-data": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "case-data-restrictions": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object"
        },
        "case-group-assignments": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "case-user-assignments": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "case-file"
      }
    },
    "case-instance": {
      "properties": {
        "case-completed-at": {
          "format": "date-time",
          "type": "string"
        },
        "case-completion-msg": {
          "type": "string"
        },
        "case-definition-id": {
          "type": "string"
        },
        "case-description": {
          "type": "string"
        },
        "case-file": {
          "$ref": "#/definitions/case-file"
        },
        "case-id": {
          "type": "string"
        },
        "case-milestones": {
          "items": {
            "$ref": "#/definitions/case-milestone",
            "xml": {
              "name": "case-milestones"
            }
          },
          "type": "array"
        },
        "case-owner": {
          "type": "string"
        },
        "case-roles": {
          "items": {
            "$ref": "#/definitions/case-role-assignment",
            "xml": {
              "name": "case-roles"
            }
          },
          "type": "array"
        },
        "case-stages": {
          "items": {
            "$ref": "#/definitions/case-stage",
            "xml": {
              "name": "case-stages"
            }
          },
          "type": "array"
        },
        "case-started-at": {
          "format": "date-time",
          "type": "string"
        },
        "case-status": {
          "format": "int32",
          "type": "integer"
        },
        "container-id": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "case-instance"
      }
    },
    "case-instance-list": {
      "properties": {
        "instances": {
          "items": {
            "$ref": "#/definitions/case-instance",
            "xml": {
              "name": "instances"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "case-instance-list"
      }
    },
    "case-milestone": {
      "properties": {
        "milestone-achieved": {
          "type": "boolean"
        },
        "milestone-achieved-at": {
          "format": "date-time",
          "type": "string"
        },
        "milestone-id": {
          "type": "string"
        },
        "milestone-name": {
          "type": "string"
        },
        "milestone-status": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "case-milestone"
      }
    },
    "case-milestone-def": {
      "properties": {
        "milestone-id": {
          "type": "string"
        },
        "milestone-mandatory": {
          "type": "boolean"
        },
        "milestone-name": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "case-milestone-def"
      }
    },
    "case-milestone-list": {
      "properties": {
        "milestones": {
          "items": {
            "$ref": "#/definitions/case-milestone",
            "xml": {
              "name": "milestones"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "case-milestone-list"
      }
    },
    "case-role-assignment": {
      "properties": {
        "groups": {
          "items": {
            "type": "string",
            "xml": {
              "name": "groups"
            }
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "users": {
          "items": {
            "type": "string",
            "xml": {
              "name": "users"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "case-role-assignment"
      }
    },
    "case-role-assignment-list": {
      "properties": {
        "role-assignments": {
          "items": {
            "$ref": "#/definitions/case-role-assignment",
            "xml": {
              "name": "role-assignments"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "case-role-assignment-list"
      }
    },
    "case-stage": {
      "properties": {
        "active-nodes": {
          "items": {
            "$ref": "#/definitions/node-instance",
            "xml": {
              "name": "active-nodes"
            }
          },
          "type": "array"
        },
        "adhoc-fragments": {
          "items": {
            "$ref": "#/definitions/case-adhoc-fragment",
            "xml": {
              "name": "adhoc-fragments"
            }
          },
          "type": "array"
        },
        "stage-id": {
          "type": "string"
        },
        "stage-name": {
          "type": "string"
        },
        "stage-status": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "case-stage"
      }
    },
    "case-stage-def": {
      "properties": {
        "adhoc-fragments": {
          "items": {
            "$ref": "#/definitions/case-adhoc-fragment",
            "xml": {
              "name": "adhoc-fragments"
            }
          },
          "type": "array"
        },
        "stage-id": {
          "type": "string"
        },
        "stage-name": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "case-stage-def"
      }
    },
    "case-stage-list": {
      "properties": {
        "stages": {
          "items": {
            "$ref": "#/definitions/case-stage",
            "xml": {
              "name": "stages"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "case-stage-list"
      }
    },
    "document-instance": {
      "properties": {
        "document-content": {
          "items": {
            "format": "byte",
            "type": "string",
            "xml": {
              "name": "document-content"
            }
          },
          "type": "array"
        },
        "document-id": {
          "type": "string"
        },
        "document-last-mod": {
          "format": "date-time",
          "type": "string"
        },
        "document-link": {
          "type": "string"
        },
        "document-name": {
          "type": "string"
        },
        "document-size": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "document-instance"
      }
    },
    "document-instance-list": {
      "properties": {
        "document-instances": {
          "items": {
            "$ref": "#/definitions/document-instance",
            "xml": {
              "name": "document-instances"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "document-instance-list"
      }
    },
    "error-info-instance": {
      "properties": {
        "error-date": {
          "format": "date-time",
          "type": "string"
        },
        "error-instance-id": {
          "format": "int64",
          "type": "integer"
        },
        "error-message": {
          "type": "string"
        },
        "error-stacktrace": {
          "type": "string"
        },
        "request-instance-id": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "error-info-instance"
      }
    },
    "error-info-instance-list": {
      "properties": {
        "error-info-instance": {
          "items": {
            "$ref": "#/definitions/error-info-instance",
            "xml": {
              "name": "error-info-instance"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "error-info-instance-list"
      }
    },
    "execution-error": {
      "properties": {
        "acknowledged": {
          "type": "boolean"
        },
        "acknowledged-at": {
          "format": "date-time",
          "type": "string"
        },
        "acknowledged-by": {
          "type": "string"
        },
        "activity-id": {
          "format": "int64",
          "type": "integer"
        },
        "activity-name": {
          "type": "string"
        },
        "container-id": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "error-date": {
          "format": "date-time",
          "type": "string"
        },
        "error-msg": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "job-id": {
          "format": "int64",
          "type": "integer"
        },
        "process-id": {
          "type": "string"
        },
        "process-instance-id": {
          "format": "int64",
          "type": "integer"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "execution-error"
      }
    },
    "execution-error-list": {
      "properties": {
        "error-instance": {
          "items": {
            "$ref": "#/definitions/execution-error",
            "xml": {
              "name": "error-instance"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "execution-error-list"
      }
    },
    "migration-report-instance": {
      "properties": {
        "migration-end": {
          "format": "date-time",
          "type": "string"
        },
        "migration-logs": {
          "items": {
            "type": "string",
            "xml": {
              "name": "migration-logs"
            }
          },
          "type": "array"
        },
        "migration-start": {
          "format": "date-time",
          "type": "string"
        },
        "migration-successful": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "migration-report-instance"
      }
    },
    "migration-report-instance-list": {
      "properties": {
        "migration-report-instance": {
          "items": {
            "$ref": "#/definitions/migration-report-instance",
            "xml": {
              "name": "migration-report-instance"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "migration-report-instance-list"
      }
    },
    "node-instance": {
      "properties": {
        "container-id": {
          "type": "string"
        },
        "node-completed": {
          "type": "boolean"
        },
        "node-connection": {
          "type": "string"
        },
        "node-id": {
          "type": "string"
        },
        "node-instance-id": {
          "format": "int64",
          "type": "integer"
        },
        "node-name": {
          "type": "string"
        },
        "node-type": {
          "type": "string"
        },
        "process-instance-id": {
          "format": "int64",
          "type": "integer"
        },
        "reference-id": {
          "format": "int64",
          "type": "integer"
        },
        "start-date": {
          "format": "date-time",
          "type": "string"
        },
        "work-item-id": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "node-instance"
      }
    },
    "node-instance-list": {
      "properties": {
        "node-instance": {
          "items": {
            "$ref": "#/definitions/node-instance",
            "xml": {
              "name": "node-instance"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "node-instance-list"
      }
    },
    "process-associated-entities": {
      "properties": {
        "associatedEntities": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "xml": {
            "name": "associated-entities",
            "wrapped": true
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "process-associated-entities"
      }
    },
    "process-definition": {
      "properties": {
        "associatedEntities": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "xml": {
            "name": "associated-entities",
            "wrapped": true
          }
        },
        "container-id": {
          "type": "string"
        },
        "dynamic": {
          "type": "boolean"
        },
        "package": {
          "type": "string"
        },
        "process-id": {
          "type": "string"
        },
        "process-name": {
          "type": "string"
        },
        "process-version": {
          "type": "string"
        },
        "processVariables": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "xml": {
            "name": "process-variables",
            "wrapped": true
          }
        },
        "reusableSubProcesses": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "xml": {
            "name": "process-subprocesses",
            "wrapped": true
          }
        },
        "serviceTasks": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "xml": {
            "name": "service-tasks",
            "wrapped": true
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "process-definition"
      }
    },
    "process-definitions": {
      "properties": {
        "processes": {
          "items": {
            "$ref": "#/definitions/process-definition",
            "xml": {
              "name": "processes"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "process-definitions"
      }
    },
    "process-instance": {
      "properties": {
        "active-user-tasks": {
          "$ref": "#/definitions/task-summary-list"
        },
        "container-id": {
          "type": "string"
        },
        "correlation-key": {
          "type": "string"
        },
        "initiator": {
          "type": "string"
        },
        "parent-instance-id": {
          "format": "int64",
          "type": "integer"
        },
        "process-id": {
          "type": "string"
        },
        "process-instance-desc": {
          "type": "string"
        },
        "process-instance-id": {
          "format": "int64",
          "type": "integer"
        },
        "process-instance-state": {
          "format": "int32",
          "type": "integer"
        },
        "process-instance-variables": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "process-name": {
          "type": "string"
        },
        "process-version": {
          "type": "string"
        },
        "start-date": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "process-instance"
      }
    },
    "process-instance-list": {
      "properties": {
        "process-instance": {
          "items": {
            "$ref": "#/definitions/process-instance",
            "xml": {
              "name": "process-instance"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "process-instance-list"
      }
    },
    "process-node": {
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "process-id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "process-node"
      }
    },
    "process-node-list": {
      "properties": {
        "process-node": {
          "items": {
            "$ref": "#/definitions/process-node",
            "xml": {
              "name": "process-node"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "process-node-list"
      }
    },
    "process-service-tasks": {
      "properties": {
        "serviceTasks": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "xml": {
            "name": "tasks",
            "wrapped": true
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "process-service-tasks"
      }
    },
    "process-subprocesses": {
      "properties": {
        "subProcesses": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "xml": {
            "name": "subprocesses",
            "wrapped": true
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "process-subprocesses"
      }
    },
    "process-task-inputs": {
      "properties": {
        "taskInputs": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "xml": {
            "name": "inputs",
            "wrapped": true
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "process-task-inputs"
      }
    },
    "process-task-outputs": {
      "properties": {
        "taskOutputs": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "xml": {
            "name": "outputs",
            "wrapped": true
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "process-task-outputs"
      }
    },
    "process-variables": {
      "properties": {
        "variables": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "xml": {
            "wrapped": true
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "process-variables"
      }
    },
    "query-definition": {
      "properties": {
        "query-expression": {
          "type": "string"
        },
        "query-name": {
          "type": "string"
        },
        "query-source": {
          "type": "string"
        },
        "query-target": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "query-definition"
      }
    },
    "query-definitions": {
      "properties": {
        "queries": {
          "items": {
            "$ref": "#/definitions/query-definition",
            "xml": {
              "name": "queries"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "query-definitions"
      }
    },
    "request-info-instance": {
      "properties": {
        "request-business-key": {
          "type": "string"
        },
        "request-command": {
          "type": "string"
        },
        "request-container-id": {
          "type": "string"
        },
        "request-data": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "request-errors": {
          "$ref": "#/definitions/error-info-instance-list"
        },
        "request-executions": {
          "format": "int32",
          "type": "integer"
        },
        "request-instance-id": {
          "format": "int64",
          "type": "integer"
        },
        "request-message": {
          "type": "string"
        },
        "request-retries": {
          "format": "int32",
          "type": "integer"
        },
        "request-scheduled-date": {
          "format": "date-time",
          "type": "string"
        },
        "request-status": {
          "type": "string"
        },
        "response-data": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "request-info-instance"
      }
    },
    "request-info-instance-list": {
      "properties": {
        "request-info-instance": {
          "items": {
            "$ref": "#/definitions/request-info-instance",
            "xml": {
              "name": "request-info-instance"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "request-info-instance-list"
      }
    },
    "response": {
      "type": "object",
      "xml": {
        "name": "response"
      }
    },
    "responses": {
      "properties": {
        "response": {
          "items": {
            "$ref": "#/definitions/response",
            "xml": {
              "name": "response"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "responses"
      }
    },
    "solver-instance": {
      "properties": {
        "best-solution": {
          "type": "object"
        },
        "container-id": {
          "type": "string"
        },
        "score": {
          "$ref": "#/definitions/ScoreWrapper"
        },
        "solver-config-file": {
          "type": "string"
        },
        "solver-id": {
          "type": "string"
        },
        "status": {
          "enum": [
            "NOT_SOLVING",
            "TERMINATING_EARLY",
            "SOLVING"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "solver-instance"
      }
    },
    "solvers": {
      "properties": {
        "solver": {
          "items": {
            "$ref": "#/definitions/solver-instance",
            "xml": {
              "name": "solver"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "solvers"
      }
    },
    "task-attachment": {
      "properties": {
        "attachment-added-at": {
          "format": "date-time",
          "type": "string"
        },
        "attachment-added-by": {
          "type": "string"
        },
        "attachment-content-id": {
          "format": "int64",
          "type": "integer"
        },
        "attachment-id": {
          "format": "int64",
          "type": "integer"
        },
        "attachment-name": {
          "type": "string"
        },
        "attachment-size": {
          "format": "int32",
          "type": "integer"
        },
        "attachment-type": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "task-attachment"
      }
    },
    "task-attachment-list": {
      "properties": {
        "task-attachment": {
          "items": {
            "$ref": "#/definitions/task-attachment",
            "xml": {
              "name": "task-attachment"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "task-attachment-list"
      }
    },
    "task-comment": {
      "properties": {
        "comment": {
          "type": "string"
        },
        "comment-added-at": {
          "format": "date-time",
          "type": "string"
        },
        "comment-added-by": {
          "type": "string"
        },
        "comment-id": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "task-comment"
      }
    },
    "task-comment-list": {
      "properties": {
        "task-comment": {
          "items": {
            "$ref": "#/definitions/task-comment",
            "xml": {
              "name": "task-comment"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "task-comment-list"
      }
    },
    "task-event-instance": {
      "properties": {
        "task-event-date": {
          "format": "date-time",
          "type": "string"
        },
        "task-event-id": {
          "format": "int64",
          "type": "integer"
        },
        "task-event-message": {
          "type": "string"
        },
        "task-event-type": {
          "type": "string"
        },
        "task-event-user": {
          "type": "string"
        },
        "task-id": {
          "format": "int64",
          "type": "integer"
        },
        "task-process-instance-id": {
          "format": "int64",
          "type": "integer"
        },
        "task-work-item-id": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "task-event-instance"
      }
    },
    "task-event-instance-list": {
      "properties": {
        "task-event-instance": {
          "items": {
            "$ref": "#/definitions/task-event-instance",
            "xml": {
              "name": "task-event-instance"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "task-event-instance-list"
      }
    },
    "task-instance": {
      "properties": {
        "task-activation-time": {
          "format": "date-time",
          "type": "string"
        },
        "task-actual-owner": {
          "type": "string"
        },
        "task-business-admins": {
          "items": {
            "type": "string",
            "xml": {
              "name": "task-business-admins"
            }
          },
          "type": "array",
          "xml": {
            "name": "business-admins",
            "wrapped": true
          }
        },
        "task-container-id": {
          "type": "string"
        },
        "task-correlation-key": {
          "type": "string"
        },
        "task-created-by": {
          "type": "string"
        },
        "task-created-on": {
          "format": "date-time",
          "type": "string"
        },
        "task-description": {
          "type": "string"
        },
        "task-excl-owners": {
          "items": {
            "type": "string",
            "xml": {
              "name": "task-excl-owners"
            }
          },
          "type": "array",
          "xml": {
            "name": "excluded-owners",
            "wrapped": true
          }
        },
        "task-expiration-time": {
          "format": "date-time",
          "type": "string"
        },
        "task-form": {
          "type": "string"
        },
        "task-id": {
          "format": "int64",
          "type": "integer"
        },
        "task-input-data": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "task-last-modificaiton-date": {
          "format": "date-time",
          "type": "string"
        },
        "task-last-modification-user": {
          "type": "string"
        },
        "task-name": {
          "type": "string"
        },
        "task-output-data": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "task-parent-id": {
          "format": "int64",
          "type": "integer"
        },
        "task-pot-owners": {
          "items": {
            "type": "string",
            "xml": {
              "name": "task-pot-owners"
            }
          },
          "type": "array",
          "xml": {
            "name": "potential-owners",
            "wrapped": true
          }
        },
        "task-priority": {
          "format": "int32",
          "type": "integer"
        },
        "task-process-id": {
          "type": "string"
        },
        "task-process-instance-id": {
          "format": "int64",
          "type": "integer"
        },
        "task-skippable": {
          "type": "boolean"
        },
        "task-status": {
          "type": "string"
        },
        "task-subject": {
          "type": "string"
        },
        "task-type": {
          "type": "string"
        },
        "task-workitem-id": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "task-instance"
      }
    },
    "task-notification": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "content": {
          "type": "string"
        },
        "groups": {
          "items": {
            "type": "string",
            "xml": {
              "name": "groups"
            }
          },
          "type": "array"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "notify-at": {
          "format": "date-time",
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "users": {
          "items": {
            "type": "string",
            "xml": {
              "name": "users"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "task-notification"
      }
    },
    "task-notification-list": {
      "properties": {
        "task-notification": {
          "items": {
            "$ref": "#/definitions/task-notification",
            "xml": {
              "name": "task-notification"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "task-notification-list"
      }
    },
    "task-reassignment": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "groups": {
          "items": {
            "type": "string",
            "xml": {
              "name": "groups"
            }
          },
          "type": "array"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "reassign-at": {
          "format": "date-time",
          "type": "string"
        },
        "users": {
          "items": {
            "type": "string",
            "xml": {
              "name": "users"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "task-reassignment"
      }
    },
    "task-reassignment-list": {
      "properties": {
        "task-reassignment": {
          "items": {
            "$ref": "#/definitions/task-reassignment",
            "xml": {
              "name": "task-reassignment"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "task-reassignment-list"
      }
    },
    "task-summary": {
      "properties": {
        "task-activation-time": {
          "format": "date-time",
          "type": "string"
        },
        "task-actual-owner": {
          "type": "string"
        },
        "task-container-id": {
          "type": "string"
        },
        "task-created-by": {
          "type": "string"
        },
        "task-created-on": {
          "format": "date-time",
          "type": "string"
        },
        "task-description": {
          "type": "string"
        },
        "task-expiration-time": {
          "format": "date-time",
          "type": "string"
        },
        "task-id": {
          "format": "int64",
          "type": "integer"
        },
        "task-is-skipable": {
          "type": "boolean"
        },
        "task-name": {
          "type": "string"
        },
        "task-parent-id": {
          "format": "int64",
          "type": "integer"
        },
        "task-priority": {
          "format": "int32",
          "type": "integer"
        },
        "task-proc-def-id": {
          "type": "string"
        },
        "task-proc-inst-id": {
          "format": "int64",
          "type": "integer"
        },
        "task-status": {
          "type": "string"
        },
        "task-subject": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "task-summary"
      }
    },
    "task-summary-list": {
      "properties": {
        "task-summary": {
          "items": {
            "$ref": "#/definitions/task-summary",
            "xml": {
              "name": "task-summary"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "task-summary-list"
      }
    },
    "timer-instance": {
      "properties": {
        "activation-time": {
          "format": "date-time",
          "type": "string"
        },
        "delay": {
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "last-fire-time": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "next-fire-time": {
          "format": "date-time",
          "type": "string"
        },
        "period": {
          "format": "int64",
          "type": "integer"
        },
        "process-instance-id": {
          "format": "int64",
          "type": "integer"
        },
        "repeat-limit": {
          "format": "int32",
          "type": "integer"
        },
        "session-id": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "timer-instance"
      }
    },
    "timer-instance-list": {
      "properties": {
        "timer-instance": {
          "items": {
            "$ref": "#/definitions/timer-instance",
            "xml": {
              "name": "timer-instance"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "timer-instance-list"
      }
    },
    "user-task-definition": {
      "properties": {
        "associatedEntities": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "xml": {
            "name": "associated-entities",
            "wrapped": true
          }
        },
        "task-comment": {
          "type": "string"
        },
        "task-created-by": {
          "type": "string"
        },
        "task-form-name": {
          "type": "string"
        },
        "task-id": {
          "type": "string"
        },
        "task-name": {
          "type": "string"
        },
        "task-priority": {
          "format": "int32",
          "type": "integer"
        },
        "task-skippable": {
          "type": "boolean"
        },
        "taskInputMappings": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "xml": {
            "name": "task-inputs",
            "wrapped": true
          }
        },
        "taskOutputMappings": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "xml": {
            "name": "task-outputs",
            "wrapped": true
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "user-task-definition"
      }
    },
    "user-task-definitions": {
      "properties": {
        "task": {
          "items": {
            "$ref": "#/definitions/user-task-definition",
            "xml": {
              "name": "task"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "user-task-definitions"
      }
    },
    "variable-instance": {
      "properties": {
        "modification-date": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "old-value": {
          "type": "string"
        },
        "process-instance-id": {
          "format": "int64",
          "type": "integer"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "variable-instance"
      }
    },
    "variable-instance-list": {
      "properties": {
        "variable-instance": {
          "items": {
            "$ref": "#/definitions/variable-instance",
            "xml": {
              "name": "variable-instance"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "variable-instance-list"
      }
    },
    "work-item-instance": {
      "properties": {
        "container-id": {
          "type": "string"
        },
        "node-id": {
          "format": "int64",
          "type": "integer"
        },
        "node-instance-id": {
          "format": "int64",
          "type": "integer"
        },
        "process-instance-id": {
          "format": "int64",
          "type": "integer"
        },
        "work-item-id": {
          "format": "int64",
          "type": "integer"
        },
        "work-item-name": {
          "type": "string"
        },
        "work-item-params": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "work-item-state": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "work-item-instance"
      }
    },
    "work-item-instance-list": {
      "properties": {
        "work-item-instance": {
          "items": {
            "$ref": "#/definitions/work-item-instance",
            "xml": {
              "name": "work-item-instance"
            }
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "work-item-instance-list"
      }
    }
  },
  "info": {
    "description": "All endpoints that can be used with the Kie Server",
    "title": "Kie Server API",
    "version": "7.0.0"
  },
  "paths": {
    "/server": {
      "get": {
        "description": "",
        "operationId": "getInfo",
        "parameters": [],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/response"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves KIE Server information - id, name, location, capabilities, messages",
        "tags": [
          "KIE Server :: Core"
        ]
      }
    },
    "/server/admin/cases/instances": {
      "get": {
        "description": "",
        "operationId": "getCaseInstances",
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "optional case instance status (open, closed, canceled) - defaults ot open (1) only",
            "in": "query",
            "items": {
              "enum": [
                "open",
                "closed",
                "cancelled"
              ],
              "type": "string"
            },
            "name": "status",
            "required": false,
            "type": "array"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/case-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves case instances without authntication checks and applies pagination",
        "tags": [
          "Administration of cases :: Case Management"
        ]
      }
    },
    "/server/admin/containers/{id}/processes/errors": {
      "get": {
        "description": "",
        "operationId": "getExecutionErrors",
        "parameters": [
          {
            "description": "container id that errors belong to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "optional flag that indicates if acknowledged errors should also be collected, defaults to false",
            "in": "query",
            "name": "includeAck",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/node-instance-list"
            }
          },
          "404": {
            "description": "Process instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves execution errors for container, applies pagination",
        "tags": [
          "Process instances administration :: BPM"
        ]
      },
      "put": {
        "description": "",
        "operationId": "acknowledgeErrors",
        "parameters": [
          {
            "description": "container id that errors belong to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "list of error identifiers to be acknowledged",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "errorId",
            "required": true,
            "type": "array"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Execution error or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Acknowledges given execution errors",
        "tags": [
          "Process instances administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/processes/errors/{errorId}": {
      "get": {
        "description": "",
        "operationId": "getExecutionErrorById",
        "parameters": [
          {
            "description": "container id that process error belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of error to be loaded",
            "in": "path",
            "name": "errorId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/execution-error"
            }
          },
          "404": {
            "description": "Process instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieve execution error by its identifier",
        "tags": [
          "Process instances administration :: BPM"
        ]
      },
      "put": {
        "description": "",
        "operationId": "acknowledgeError",
        "parameters": [
          {
            "description": "container id that error belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of error to be acknowledged",
            "in": "path",
            "name": "errorId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Execution error or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Acknowledge execution error by given id",
        "tags": [
          "Process instances administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/processes/instances": {
      "put": {
        "description": "",
        "operationId": "migrateProcessInstances",
        "parameters": [
          {
            "description": "container id that process instances belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "list of identifiers of process instance to be migrated",
            "in": "query",
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "name": "pInstanceId",
            "required": true,
            "type": "array"
          },
          {
            "description": "container id that new process definition belongs to",
            "in": "query",
            "name": "targetContainerId",
            "required": true,
            "type": "string"
          },
          {
            "description": "process definition that process instances should be migrated to",
            "in": "query",
            "name": "targetProcessId",
            "required": true,
            "type": "string"
          },
          {
            "description": "node mapping - unique ids of old definition to new definition given as Map",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/migration-report-instance-list"
            }
          },
          "404": {
            "description": "Process instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Migrates process instances to new container and process definition with optional node mapping",
        "tags": [
          "Process instances administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/processes/instances/{pInstanceId}": {
      "put": {
        "description": "",
        "operationId": "migrateProcessInstance",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of process instance to be migrated",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "container id that new process definition belongs to",
            "in": "query",
            "name": "targetContainerId",
            "required": true,
            "type": "string"
          },
          {
            "description": "process definition that process instance should be migrated to",
            "in": "query",
            "name": "targetProcessId",
            "required": true,
            "type": "string"
          },
          {
            "description": "node mapping - unique ids of old definition to new definition given as Map",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/migration-report-instance"
            }
          },
          "404": {
            "description": "Process instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Migrates process instance to new container and process definition with optional node mapping",
        "tags": [
          "Process instances administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/processes/instances/{pInstanceId}/errors": {
      "get": {
        "description": "",
        "operationId": "getExecutionErrorsByProcessInstance",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of process instance that errors should be collected for",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "default": false,
            "description": "optional flag that indicates if acknowledged errors should also be collected, defaults to false",
            "in": "query",
            "name": "includeAck",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "optional name of the node in the process instance to filter by",
            "in": "query",
            "name": "node",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/execution-error-list"
            }
          },
          "404": {
            "description": "Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves execution errors for process instance and container, applies pagination",
        "tags": [
          "Process instances administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/processes/instances/{pInstanceId}/nodeinstances": {
      "get": {
        "description": "",
        "operationId": "getActiveNodeInstances",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of process instance that active nodes instances should be collected for",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/node-instance-list"
            }
          },
          "404": {
            "description": "Process instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves all active node instances from process instance and container",
        "tags": [
          "Process instances administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/processes/instances/{pInstanceId}/nodeinstances/{nodeInstanceId}": {
      "delete": {
        "description": "",
        "operationId": "cancelNodeInstance",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of process instance that node instance belongs to",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "identifier of node instance that should be canceled",
            "format": "int64",
            "in": "path",
            "name": "nodeInstanceId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Process instance, node instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Cancels given node instance within process instance and container",
        "tags": [
          "Process instances administration :: BPM"
        ]
      },
      "put": {
        "description": "",
        "operationId": "retriggerNodeInstance",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of process instance that node instance belongs to",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "identifier of node instance that should be retriggered",
            "format": "int64",
            "in": "path",
            "name": "nodeInstanceId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Process instance, node instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retriggers given node instance within process instance and container",
        "tags": [
          "Process instances administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/processes/instances/{pInstanceId}/nodes": {
      "get": {
        "description": "",
        "operationId": "getNodes",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of process instance that process nodes should be collected from",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/process-node-list"
            }
          },
          "404": {
            "description": "Process instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves all nodes from process instance and container",
        "tags": [
          "Process instances administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/processes/instances/{pInstanceId}/nodes/{nodeId}": {
      "post": {
        "description": "",
        "operationId": "triggerNode",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of process instance where node should be triggered",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "identifier of the node to be triggered",
            "format": "int64",
            "in": "path",
            "name": "nodeId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Process instance, node instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Triggers node within process instance and container",
        "tags": [
          "Process instances administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/processes/instances/{pInstanceId}/timers": {
      "get": {
        "description": "",
        "operationId": "getTimerInstances",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of process instance that timer instances should be collected for",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/timer-instance-list"
            }
          },
          "404": {
            "description": "Process instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves all active timer instance from process instance and container",
        "tags": [
          "Process instances administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/processes/instances/{pInstanceId}/timers/{timerId}": {
      "put": {
        "description": "",
        "operationId": "updateTimer",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of process instance that timer belongs to",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "identifier of timer instance to be updated",
            "format": "int64",
            "in": "path",
            "name": "timerId",
            "required": true,
            "type": "integer"
          },
          {
            "default": true,
            "description": "optional flag that indicates if the time expression is relative to the current date or not, defaults to true",
            "in": "query",
            "name": "relative",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Map of timer expressions - deplay, perios and repeat are allowed values in the map",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Process instance, node instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Updates timer instance within process instance and container",
        "tags": [
          "Process instances administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/tasks/errors": {
      "get": {
        "description": "",
        "operationId": "getExecutionErrors",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "optional flag that indicates if acknowledged errors should also be collected, defaults to false",
            "in": "query",
            "name": "includeAck",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "optional name of the task to filter by",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "optional process id that the task belongs to to filter by",
            "in": "query",
            "name": "process",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/execution-error-list"
            }
          },
          "404": {
            "description": "Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves execution errors for container, allows to filter by task name and/or process id, applies pagination",
        "tags": [
          "User tasks administration :: BPM"
        ]
      },
      "put": {
        "description": "",
        "operationId": "acknowledgeErrors",
        "parameters": [
          {
            "description": "container id that errors belong to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "list of identifiers of execution errors to be acknowledged",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "errorId",
            "required": true,
            "type": "array"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Acknowledges given execution errors",
        "tags": [
          "User tasks administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/tasks/errors/{errorId}": {
      "get": {
        "description": "",
        "operationId": "getExecutionErrorById",
        "parameters": [
          {
            "description": "container id that error belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the execution error to load",
            "in": "path",
            "name": "errorId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/execution-error"
            }
          },
          "404": {
            "description": "Task instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieve execution error by its identifier",
        "tags": [
          "User tasks administration :: BPM"
        ]
      },
      "put": {
        "description": "",
        "operationId": "acknowledgeError",
        "parameters": [
          {
            "description": "container id that error belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the execution error to be acknowledged",
            "in": "path",
            "name": "errorId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Acknowledges given execution error",
        "tags": [
          "User tasks administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/tasks/{tInstanceId}/admins": {
      "put": {
        "description": "",
        "operationId": "addAdmins",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of task instance to be updated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "default": false,
            "description": "optional flag that indicates if existing business admins should be removed, defaults to false",
            "in": "query",
            "name": "remove",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "list of users/groups to be added as business admins, as OrgEntities type",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Adds business admins to given task instance, optionally removing existing ones",
        "tags": [
          "User tasks administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/tasks/{tInstanceId}/admins/groups/{entityId}": {
      "delete": {
        "description": "",
        "operationId": "removeAdminsGroups",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of task instance to be updated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "list of groups to be removed from business admin list",
            "in": "path",
            "name": "entityId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Removes business admin groups from given task instance",
        "tags": [
          "User tasks administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/tasks/{tInstanceId}/admins/users/{entityId}": {
      "delete": {
        "description": "",
        "operationId": "removeAdminsUsers",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of task instance to be updated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "list of users to be removed from business admin list",
            "in": "path",
            "name": "entityId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Removes business admins from given task instance",
        "tags": [
          "User tasks administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/tasks/{tInstanceId}/contents/input": {
      "delete": {
        "description": "",
        "operationId": "removeTaskInputs",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of task instance to be updated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "collectionFormat": "multi",
            "description": "one or more names of task inputs to be removed",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "name",
            "required": true,
            "type": "array"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Removes task inputs referenced by names from given task instance",
        "tags": [
          "User tasks administration :: BPM"
        ]
      },
      "put": {
        "description": "",
        "operationId": "addTaskInputs",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of task instance to be updated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "map of data to be set as task inputs, as Map",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Adds task inputs to given task instance",
        "tags": [
          "User tasks administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/tasks/{tInstanceId}/contents/output": {
      "delete": {
        "description": "",
        "operationId": "removeTaskOutputs",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of task instance to be updated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "collectionFormat": "multi",
            "description": "one or more names of task outputs to be removed",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "name",
            "required": true,
            "type": "array"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Removes task outputs referenced by names from given task instance",
        "tags": [
          "User tasks administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/tasks/{tInstanceId}/errors": {
      "get": {
        "description": "",
        "operationId": "getExecutionErrorsByTask",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that errors should be collected for",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "default": false,
            "description": "optional flag that indicates if acknowledged errors should also be collected, defaults to false",
            "in": "query",
            "name": "includeAck",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/execution-error-list"
            }
          },
          "404": {
            "description": "Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves execution errors for task instance and container, applies pagination",
        "tags": [
          "User tasks administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/tasks/{tInstanceId}/exl-owners": {
      "put": {
        "description": "",
        "operationId": "addExcludedOwners",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of task instance to be updated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "default": false,
            "description": "optional flag that indicates if existing excluded owners should be removed, defaults to false",
            "in": "query",
            "name": "remove",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "list of users/groups to be added as excluded owners, as OrgEntities type",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Adds excluded owners to given task instance, optionally removing existing ones",
        "tags": [
          "User tasks administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/tasks/{tInstanceId}/exl-owners/groups/{entityId}": {
      "delete": {
        "description": "",
        "operationId": "removeExcludedOwnersGroups",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of task instance to be updated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "list of groups to be removed from excluded owners list",
            "in": "path",
            "name": "entityId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Removes excluded owners groups from given task instance",
        "tags": [
          "User tasks administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/tasks/{tInstanceId}/exl-owners/users/{entityId}": {
      "delete": {
        "description": "",
        "operationId": "removeExcludedOwnersUsers",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of task instance to be updated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "list of users to be removed from excluded owners list",
            "in": "path",
            "name": "entityId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Removes excluded owners from given task instance",
        "tags": [
          "User tasks administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/tasks/{tInstanceId}/notifications": {
      "get": {
        "description": "",
        "operationId": "getTaskNotifications",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of task instance to be updated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "default": true,
            "description": "optional flag that indicates if active only notifications should be collected, defaults to true",
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/task-notification-list"
            }
          },
          "404": {
            "description": "Task instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves notifications for given task",
        "tags": [
          "User tasks administration :: BPM"
        ]
      },
      "post": {
        "description": "",
        "operationId": "notify",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of task instance to be updated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "time expression for notification",
            "in": "query",
            "name": "expiresAt",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "optional flag that indicates the type of notification, either whenNotStarted or whenNotCompleted must be set",
            "in": "query",
            "name": "whenNotStarted",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "optional flag that indicates the type of notification, either whenNotStarted or whenNotCompleted must be set",
            "in": "query",
            "name": "whenNotCompleted",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "email notification details, as EmailNotification type",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          "404": {
            "description": "Task instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Schedules new notification for given task instance",
        "tags": [
          "User tasks administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/tasks/{tInstanceId}/notifications/{notificationId}": {
      "delete": {
        "description": "",
        "operationId": "cancelNotification",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of task instance to be updated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "identifier of notification to be canceled",
            "format": "int64",
            "in": "path",
            "name": "notificationId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Cancels notification for given task instance",
        "tags": [
          "User tasks administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/tasks/{tInstanceId}/pot-owners": {
      "put": {
        "description": "",
        "operationId": "addPotentialOwners",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of task instance to be updated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "default": false,
            "description": "optional flag that indicates if existing potential owners should be removed, defaults to false",
            "in": "query",
            "name": "remove",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "list of users/groups to be added as potential owners, as OrgEntities type",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Adds potential owners to given task instance, optionally removing existing ones",
        "tags": [
          "User tasks administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/tasks/{tInstanceId}/pot-owners/groups/{entityId}": {
      "delete": {
        "description": "",
        "operationId": "removePotentialOwnersGroups",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of task instance to be updated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "list of groups to be removed from potantial owners list",
            "in": "path",
            "name": "entityId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Removes potential owner groups from given task instance",
        "tags": [
          "User tasks administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/tasks/{tInstanceId}/pot-owners/users/{entityId}": {
      "delete": {
        "description": "",
        "operationId": "removePotentialOwnersUsers",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of task instance to be updated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "list of users to be removed from potantial owners list",
            "in": "path",
            "name": "entityId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Removes potential owners from given task instance",
        "tags": [
          "User tasks administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/tasks/{tInstanceId}/reassignments": {
      "get": {
        "description": "",
        "operationId": "getTaskReassignments",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of task instance to be updated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "default": true,
            "description": "optional flag that indicates if active only reassignmnets should be collected, defaults to true",
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/task-reassignment-list"
            }
          },
          "404": {
            "description": "Task instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves reassignments for given task",
        "tags": [
          "User tasks administration :: BPM"
        ]
      },
      "post": {
        "description": "",
        "operationId": "reassign",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of task instance to be updated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "time expression for reassignmnet",
            "in": "query",
            "name": "expiresAt",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "optional flag that indicates the type of reassignment, either whenNotStarted or whenNotCompleted must be set",
            "in": "query",
            "name": "whenNotStarted",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "optional flag that indicates the type of reassignment, either whenNotStarted or whenNotCompleted must be set",
            "in": "query",
            "name": "whenNotCompleted",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "list of users/groups that task should be reassined to, as OrgEntities type",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          "404": {
            "description": "Task instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Schedules new reassign of given task instance",
        "tags": [
          "User tasks administration :: BPM"
        ]
      }
    },
    "/server/admin/containers/{id}/tasks/{tInstanceId}/reassignments/{reassignmentId}": {
      "delete": {
        "description": "",
        "operationId": "cancelReassignment",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of task instance to be updated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "identifier of reassignment to be canceled",
            "format": "int64",
            "in": "path",
            "name": "reassignmentId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Cancels reassignment for given task instance",
        "tags": [
          "User tasks administration :: BPM"
        ]
      }
    },
    "/server/config": {
      "post": {
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "description": "",
        "operationId": "executeCommands",
        "parameters": [
          {
            "description": "command script payload",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/responses"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Executes command script on execution server, usually used as a batch to configure KIE Server",
        "tags": [
          "KIE Server Script :: Core"
        ]
      }
    },
    "/server/containers": {
      "get": {
        "description": "",
        "operationId": "listContainers",
        "parameters": [
          {
            "description": "optional groupId to filter containers by",
            "in": "query",
            "name": "groupId",
            "required": false,
            "type": "string"
          },
          {
            "description": "optional artifactId to filter containers by",
            "in": "query",
            "name": "artifactId",
            "required": false,
            "type": "string"
          },
          {
            "description": "optional version to filter containers by",
            "in": "query",
            "name": "version",
            "required": false,
            "type": "string"
          },
          {
            "description": "optional status to filter containers by",
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/response"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves containers deployed to this server, optionally filtered by group, artifact, version or status",
        "tags": [
          "KIE Server :: Core"
        ]
      }
    },
    "/server/containers/instances/{id}": {
      "post": {
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "description": "",
        "operationId": "manageContainer",
        "parameters": [
          {
            "description": "Container id where rules should be evaluated on",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Commands to be executed on rule engine given as BatchExecutionCommand type",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/response"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Evaluates rules by executing commands on the rule session",
        "tags": [
          "Rules evaluation :: BRM"
        ]
      }
    },
    "/server/containers/{id}": {
      "delete": {
        "description": "",
        "operationId": "disposeContainer",
        "parameters": [
          {
            "description": "Container id to be disposed (undeployed)",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/response"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Disposes (undeploys) container with given id",
        "tags": [
          "KIE Server :: Core"
        ]
      },
      "get": {
        "description": "",
        "operationId": "getContainerInfo",
        "parameters": [
          {
            "description": "Container id to be retrieved",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/response"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves container with given id",
        "tags": [
          "KIE Server :: Core"
        ]
      },
      "put": {
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "description": "",
        "operationId": "createContainer",
        "parameters": [
          {
            "description": "Container id to be assigned to deployed KIE Container",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "KIE Container resource to be deployed as KieContainerResource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/response"
            }
          },
          "400": {
            "description": "container could not be created"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Creates (deploys) new KIE container to this server",
        "tags": [
          "KIE Server :: Core"
        ]
      }
    },
    "/server/containers/{id}/cases/definitions": {
      "get": {
        "description": "",
        "operationId": "getCaseDefinitionsByContainer",
        "parameters": [
          {
            "description": "container id that should be used to filter case definitions",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/case-definition-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves case definition for given container only, applies pagination",
        "tags": [
          "Case instances :: Case Management"
        ]
      }
    },
    "/server/containers/{id}/cases/definitions/{caseDefId}": {
      "get": {
        "description": "",
        "operationId": "getCaseDefinitionsByDefinition",
        "parameters": [
          {
            "description": "container id that should be used to filter case definitions",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "case definition id that should be loaded",
            "in": "path",
            "name": "caseDefId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/case-definition"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves case definition for given container and case definition id",
        "tags": [
          "Case instances :: Case Management"
        ]
      }
    },
    "/server/containers/{id}/cases/instances": {
      "get": {
        "description": "",
        "operationId": "getCaseInstancesByContainer",
        "parameters": [
          {
            "description": "container id that should be used to filter case instances",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "optional case instance status (open, closed, canceled) - defaults ot open (1) only",
            "in": "query",
            "items": {
              "enum": [
                "open",
                "closed",
                "cancelled"
              ],
              "type": "string"
            },
            "name": "status",
            "required": false,
            "type": "array"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/case-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves case instances for given container only, allows to filter by case instance status and applies pagination",
        "tags": [
          "Case instances :: Case Management"
        ]
      }
    },
    "/server/containers/{id}/cases/instances/{caseId}": {
      "delete": {
        "description": "",
        "operationId": "cancelCaseInstance",
        "parameters": [
          {
            "description": "container id that case instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "allows to destroy (permanently) case instance as part of the cancel operation, defaults to false",
            "in": "query",
            "name": "destroy",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Cancels case instance with given identifier (case id) it can also when intructed permanently destroy the case instance",
        "tags": [
          "Case instances :: Case Management"
        ]
      },
      "get": {
        "description": "",
        "operationId": "getCaseInstance",
        "parameters": [
          {
            "description": "container id that case instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "optional flag to load data when loading case instance",
            "in": "query",
            "name": "withData",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "optional flag to load roles when loading case instance",
            "in": "query",
            "name": "withRoles",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "optional flag to load milestones when loading case instance",
            "in": "query",
            "name": "withMilestones",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "optional flag to load stages when loading case instance",
            "in": "query",
            "name": "withStages",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/case-instance"
            }
          },
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves active case instance by given identifier (case id) with optionally loading data, roles, milestones and stages",
        "tags": [
          "Case instances :: Case Management"
        ]
      },
      "post": {
        "description": "",
        "operationId": "closeCaseInstance",
        "parameters": [
          {
            "description": "container id that case instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "description": "optional comment when closing a case instance as String",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Closes case instance with given identifier (case id) optionally with comment",
        "tags": [
          "Case instances :: Case Management"
        ]
      }
    },
    "/server/containers/{id}/cases/instances/{caseId}/adhocfragments": {
      "get": {
        "description": "",
        "operationId": "getCaseInstanceAdHocFragments",
        "parameters": [
          {
            "description": "container id that case instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/case-adhoc-fragment-list"
            }
          },
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves adhoc fragments from case instance",
        "tags": [
          "Case instances :: Case Management"
        ]
      }
    },
    "/server/containers/{id}/cases/instances/{caseId}/caseFile": {
      "delete": {
        "description": "",
        "operationId": "deleteCaseInstanceData",
        "parameters": [
          {
            "description": "container id that case instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "one or more names of the data items to be removed from case file",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "dataId",
            "required": true,
            "type": "array"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Removes data items identified by name(s) from case instance's case file",
        "tags": [
          "Case instances :: Case Management"
        ]
      },
      "get": {
        "description": "",
        "operationId": "getCaseInstanceData",
        "parameters": [
          {
            "description": "container id that case instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "optional name(s) of the data items to retrieve",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "name",
            "required": false,
            "type": "array"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "additionalProperties": {
                "type": "object"
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves case instance data as map where key is the name of data item and value is actual instance of the data item from case file",
        "tags": [
          "Case instances :: Case Management"
        ]
      },
      "post": {
        "description": "",
        "operationId": "putCaseInstanceData",
        "parameters": [
          {
            "description": "container id that case instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "optional role name(s) that given data should be restricted to",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "restrictedTo",
            "required": false,
            "type": "array"
          },
          {
            "description": "map of data to be placed in case file as Map",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Puts new data (map of variables) into case instance's case file",
        "tags": [
          "Case instances :: Case Management"
        ]
      }
    },
    "/server/containers/{id}/cases/instances/{caseId}/caseFile/{dataId}": {
      "get": {
        "description": "",
        "operationId": "getCaseInstanceDataByName",
        "parameters": [
          {
            "description": "container id that case instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the data item within case file to retrieve",
            "in": "path",
            "name": "dataId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves case instance data by data item name",
        "tags": [
          "Case instances :: Case Management"
        ]
      },
      "post": {
        "description": "",
        "operationId": "putCaseInstanceDataByName",
        "parameters": [
          {
            "description": "container id that case instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the data item to be added to case file",
            "in": "path",
            "name": "dataId",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "optional role name(s) that given data should be restricted to",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "restrictedTo",
            "required": false,
            "type": "array"
          },
          {
            "description": "data to be placed in case file, any type can be provided",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Puts new data (single data identified by name) into case instance's case file",
        "tags": [
          "Case instances :: Case Management"
        ]
      }
    },
    "/server/containers/{id}/cases/instances/{caseId}/comments": {
      "get": {
        "description": "",
        "operationId": "getCaseInstanceComments",
        "parameters": [
          {
            "description": "container id that case instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/case-comment-list"
            }
          },
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves comments from case instance",
        "tags": [
          "Case instances :: Case Management"
        ]
      },
      "post": {
        "description": "",
        "operationId": "addComment",
        "parameters": [
          {
            "description": "container id that case instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "description": "optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled",
            "in": "query",
            "name": "author",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "optional role name(s) that given comment should be restricted to",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "restrictedTo",
            "required": false,
            "type": "array"
          },
          {
            "description": "actual content of the comment to be added as String",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Adds new comment to given case instance",
        "tags": [
          "Case instances :: Case Management"
        ]
      }
    },
    "/server/containers/{id}/cases/instances/{caseId}/comments/{caseCommentId}": {
      "delete": {
        "description": "",
        "operationId": "removeComment",
        "parameters": [
          {
            "description": "container id that case instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the comment to be removed",
            "in": "path",
            "name": "caseCommentId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Removes given comment from case instance",
        "tags": [
          "Case instances :: Case Management"
        ]
      },
      "put": {
        "description": "",
        "operationId": "updateComment",
        "parameters": [
          {
            "description": "container id that case instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the comment to be updated",
            "in": "path",
            "name": "caseCommentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled",
            "in": "query",
            "name": "author",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "optional role name(s) that given comment should be restricted to",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "restrictedTo",
            "required": false,
            "type": "array"
          },
          {
            "description": "actual content of the comment to be updated to as String",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Updates comment within case instance",
        "tags": [
          "Case instances :: Case Management"
        ]
      }
    },
    "/server/containers/{id}/cases/instances/{caseId}/milestones": {
      "get": {
        "description": "",
        "operationId": "getCaseInstanceMilestones",
        "parameters": [
          {
            "description": "container id that case instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional flag that allows to control which milestones to load - achieved only or actives ones too, defaults to true",
            "in": "query",
            "name": "achievedOnly",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/case-milestone-list"
            }
          },
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves milestones from case instance",
        "tags": [
          "Case instances :: Case Management"
        ]
      }
    },
    "/server/containers/{id}/cases/instances/{caseId}/nodes/instances": {
      "get": {
        "description": "",
        "operationId": "getCaseInstanceActiveNodes",
        "parameters": [
          {
            "description": "container id that case instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "optional flag that allows to control which node instances to load - active or completed, defaults to false loading only active ones",
            "in": "query",
            "name": "completed",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/node-instance-list"
            }
          },
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves node instances from case instance",
        "tags": [
          "Case instances :: Case Management"
        ]
      }
    },
    "/server/containers/{id}/cases/instances/{caseId}/processes/instances": {
      "get": {
        "description": "",
        "operationId": "getCaseInstanceProcessInstance",
        "parameters": [
          {
            "description": "container id that case instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "optional process instance status (active, completed, aborted) - defaults ot active (1) only",
            "in": "query",
            "items": {
              "enum": [
                1,
                2,
                3
              ],
              "format": "int32",
              "type": "integer"
            },
            "name": "status",
            "required": false,
            "type": "array"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/process-instance-list"
            }
          },
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves process isntances that compose complete case instance",
        "tags": [
          "Case instances :: Case Management"
        ]
      }
    },
    "/server/containers/{id}/cases/instances/{caseId}/processes/{pId}": {
      "post": {
        "description": "",
        "operationId": "addDynamicProcessToCase",
        "parameters": [
          {
            "description": "container id that case instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "description": "process id of the subprocess to be added",
            "in": "path",
            "name": "pId",
            "required": true,
            "type": "string"
          },
          {
            "description": "data for dynamic subprocess",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Adds dynamic subprocess identified by process id to case instance",
        "tags": [
          "Case instances :: Case Management"
        ]
      }
    },
    "/server/containers/{id}/cases/instances/{caseId}/roles": {
      "get": {
        "description": "",
        "operationId": "getCaseInstanceRoleAssignments",
        "parameters": [
          {
            "description": "container id that case instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/case-role-assignment-list"
            }
          },
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves role assignments from case instance",
        "tags": [
          "Case instances :: Case Management"
        ]
      }
    },
    "/server/containers/{id}/cases/instances/{caseId}/roles/{caseRoleName}": {
      "delete": {
        "description": "",
        "operationId": "removeRoleAssignment",
        "parameters": [
          {
            "description": "container id that case instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the case role the assignment should be removed",
            "in": "path",
            "name": "caseRoleName",
            "required": true,
            "type": "string"
          },
          {
            "description": "user to be removed from case role for given case instance",
            "in": "query",
            "name": "user",
            "required": true,
            "type": "string"
          },
          {
            "description": "group to be removed from case role for given case instance",
            "in": "query",
            "name": "group",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Removes role assignment from user or group for given case instance",
        "tags": [
          "Case instances :: Case Management"
        ]
      },
      "put": {
        "description": "",
        "operationId": "addRoleAssignment",
        "parameters": [
          {
            "description": "container id that case instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the case role the assignment should be set",
            "in": "path",
            "name": "caseRoleName",
            "required": true,
            "type": "string"
          },
          {
            "description": "user to be aded to case role for given case instance",
            "in": "query",
            "name": "user",
            "required": true,
            "type": "string"
          },
          {
            "description": "group to be aded to case role for given case instance",
            "in": "query",
            "name": "group",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Adds new role assignment for given case, it can be either user or group based assignment",
        "tags": [
          "Case instances :: Case Management"
        ]
      }
    },
    "/server/containers/{id}/cases/instances/{caseId}/stages": {
      "get": {
        "description": "",
        "operationId": "getCaseInstanceStages",
        "parameters": [
          {
            "description": "container id that case instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional flag that allows to control which stages to load - active only or completed ones too, defaults to true",
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/case-stage-list"
            }
          },
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves stages from case instance",
        "tags": [
          "Case instances :: Case Management"
        ]
      }
    },
    "/server/containers/{id}/cases/instances/{caseId}/stages/{caseStageId}/processes/{pId}": {
      "post": {
        "description": "",
        "operationId": "addDynamicProcessToCase",
        "parameters": [
          {
            "description": "container id that case instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the stage within case instance where dynamic subprocess should be added",
            "in": "path",
            "name": "caseStageId",
            "required": true,
            "type": "string"
          },
          {
            "description": "process id of the subprocess to be added",
            "in": "path",
            "name": "pId",
            "required": true,
            "type": "string"
          },
          {
            "description": "data for dynamic subprocess",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Adds dynamic subprocess identified by process id to stage within case instance",
        "tags": [
          "Case instances :: Case Management"
        ]
      }
    },
    "/server/containers/{id}/cases/instances/{caseId}/stages/{caseStageId}/tasks": {
      "post": {
        "description": "",
        "operationId": "addDynamicTaskToCase",
        "parameters": [
          {
            "description": "container id that case instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the stage within case instance where dynamic task should be added",
            "in": "path",
            "name": "caseStageId",
            "required": true,
            "type": "string"
          },
          {
            "description": "data for dynamic task (it represents task specification that drives the selection of the type of task)",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Adds dynamic task (user or service depending on the payload) to given stage within case instance",
        "tags": [
          "Case instances :: Case Management"
        ]
      }
    },
    "/server/containers/{id}/cases/instances/{caseId}/stages/{caseStageId}/tasks/{nodeName}": {
      "put": {
        "description": "",
        "operationId": "triggerAdHocNodeInStage",
        "parameters": [
          {
            "description": "container id that case instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the stage within case instance where adhoc fragment should be triggered",
            "in": "path",
            "name": "caseStageId",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the adhoc fragment to be triggered",
            "in": "path",
            "name": "nodeName",
            "required": true,
            "type": "string"
          },
          {
            "description": "optional data to be given when triggering adhoc fragment",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Triggers ad hoc fragment in stage within case instance with optional data",
        "tags": [
          "Case instances :: Case Management"
        ]
      }
    },
    "/server/containers/{id}/cases/instances/{caseId}/tasks": {
      "post": {
        "description": "",
        "operationId": "addDynamicTaskToCase",
        "parameters": [
          {
            "description": "container id that case instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "description": "data for dynamic task (it represents task specification that drives the selection of the type of task)",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Adds dynamic task (user or service depending on the payload) to case instance",
        "tags": [
          "Case instances :: Case Management"
        ]
      }
    },
    "/server/containers/{id}/cases/instances/{caseId}/tasks/{nodeName}": {
      "put": {
        "description": "",
        "operationId": "triggerAdHocNode",
        "parameters": [
          {
            "description": "container id that case instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the adhoc fragment to be triggered",
            "in": "path",
            "name": "nodeName",
            "required": true,
            "type": "string"
          },
          {
            "description": "optional data to be given when triggering adhoc fragment",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Triggers ad hoc fragment in case instance with optional data",
        "tags": [
          "Case instances :: Case Management"
        ]
      }
    },
    "/server/containers/{id}/cases/{caseDefId}/instances": {
      "get": {
        "description": "",
        "operationId": "getCaseInstancesByDefinition",
        "parameters": [
          {
            "description": "container id that should be used to filter case instances",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "case definition id that should be used to filter case instances",
            "in": "path",
            "name": "caseDefId",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "optional case instance status (open, closed, canceled) - defaults ot open (1) only",
            "in": "query",
            "items": {
              "enum": [
                "open",
                "closed",
                "cancelled"
              ],
              "type": "string"
            },
            "name": "status",
            "required": false,
            "type": "array"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/case-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves case instances for given case definition only, allows to filter by case instance status and applies pagination",
        "tags": [
          "Case instances :: Case Management"
        ]
      },
      "post": {
        "description": "",
        "operationId": "startCase",
        "parameters": [
          {
            "description": "container id where the case definition resides",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "case definition id that new instance should be created from",
            "in": "path",
            "name": "caseDefId",
            "required": true,
            "type": "string"
          },
          {
            "description": "optional CaseFile with variables and/or case role assignments",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Case definition or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Starts new case instance of given case definition within given container with optional initial CaseFile (that provides variables and case role assignment)",
        "tags": [
          "Case instances :: Case Management"
        ]
      }
    },
    "/server/containers/{id}/cases/{caseDefId}/instances/{caseId}": {
      "put": {
        "description": "",
        "operationId": "reopenCase",
        "parameters": [
          {
            "description": "container id where the case definition resides",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "case definition id that new instance should be created from",
            "in": "path",
            "name": "caseDefId",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the case instance",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "description": "optional CaseFile with variables and/or case role assignments",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Case instance not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Reopens case instance with given identifier (case id) by initiating given case definition",
        "tags": [
          "Case instances :: Case Management"
        ]
      }
    },
    "/server/containers/{id}/dmn": {
      "get": {
        "description": "",
        "operationId": "getModels",
        "parameters": [
          {
            "description": "Container id that modesl should be loaded from",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/response"
            }
          },
          "404": {
            "description": "Models or container not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves DMN model for given container",
        "tags": [
          "Decision Service :: DMN"
        ]
      },
      "post": {
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "description": "",
        "operationId": "evaluateDecisions",
        "parameters": [
          {
            "description": "Container id to be used to evaluate decisions on",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "DMN context to be used while evaluation decisions as DMNContextKS type",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/response"
            }
          },
          "404": {
            "description": "Container not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Evaluates decisions for given imput",
        "tags": [
          "Decision Service :: DMN"
        ]
      }
    },
    "/server/containers/{id}/forms/processes/{pId}": {
      "get": {
        "description": "",
        "operationId": "getProcessForm",
        "parameters": [
          {
            "description": "container id that process definition belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of process definition that form should be fetched for",
            "in": "path",
            "name": "pId",
            "required": true,
            "type": "string"
          },
          {
            "default": "en",
            "description": "optional language that the form should be found for",
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          },
          {
            "description": "optional filter flag if form should be filtered or returned as is",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "boolean"
          },
          {
            "default": "ANY",
            "description": "optional type of the form, defaults to ANY so system will find the most current one",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional marshall content flag if the content should be transformed or not, defaults to true",
            "in": "query",
            "name": "marshallContent",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Process definition, form or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves form for process definition within a container",
        "tags": [
          "Process and task forms :: BPM"
        ]
      }
    },
    "/server/containers/{id}/forms/tasks/{tInstanceId}": {
      "get": {
        "description": "",
        "operationId": "getTaskForm",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of task instance that form should be fetched for",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "default": "en",
            "description": "optional language that the form should be found for",
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          },
          {
            "description": "optional filter flag if form should be filtered or returned as is",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "boolean"
          },
          {
            "default": "ANY",
            "description": "optional type of the form, defaults to ANY so system will find the most current one",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional marshall content flag if the content should be transformed or not, defaults to true",
            "in": "query",
            "name": "marshallContent",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Task, form or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves form for task instance within a container",
        "tags": [
          "Process and task forms :: BPM"
        ]
      }
    },
    "/server/containers/{id}/images/processes/instances/{pInstanceId}": {
      "get": {
        "description": "",
        "operationId": "getProcessInstanceImage",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the process instance that image should be loaded for",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/svg+xml"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Process instance, image or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves process instance image",
        "tags": [
          "Process definition and instance images :: BPM"
        ]
      }
    },
    "/server/containers/{id}/images/processes/{pId}": {
      "get": {
        "description": "",
        "operationId": "getProcessImage",
        "parameters": [
          {
            "description": "container id that process definition belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the process definition that image should be loaded for",
            "in": "path",
            "name": "pId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/svg+xml"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Process definition, image or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves process definition image",
        "tags": [
          "Process definition and instance images :: BPM"
        ]
      }
    },
    "/server/containers/{id}/processes": {
      "get": {
        "description": "",
        "operationId": "getProcessesByDeploymentId",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/process-definitions"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves process definitions that belong to given container",
        "tags": [
          "Process instances :: BPM"
        ]
      }
    },
    "/server/containers/{id}/processes/definitions/{pId}": {
      "get": {
        "description": "",
        "operationId": "getProcessDefinition",
        "parameters": [
          {
            "description": "container id where the process definition resides",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "process id that the definition should be retrieved for",
            "in": "path",
            "name": "pId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/process-definition"
            }
          },
          "404": {
            "description": "Process or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves process definition identified by given process id within given container",
        "tags": [
          "Process and task definitions :: BPM"
        ]
      }
    },
    "/server/containers/{id}/processes/definitions/{pId}/entities": {
      "get": {
        "description": "",
        "operationId": "getAssociatedEntities",
        "parameters": [
          {
            "description": "container id where the process definition resides",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "process id that the involved actors and groups should be retrieved from",
            "in": "path",
            "name": "pId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/process-associated-entities"
            }
          },
          "404": {
            "description": "Process or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves actors and groups that are involved in given process and container",
        "tags": [
          "Process and task definitions :: BPM"
        ]
      }
    },
    "/server/containers/{id}/processes/definitions/{pId}/subprocesses": {
      "get": {
        "description": "",
        "operationId": "getReusableSubProcesses",
        "parameters": [
          {
            "description": "container id where the process definition resides",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "process id that subprocesses should be retrieved from",
            "in": "path",
            "name": "pId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/process-subprocesses"
            }
          },
          "404": {
            "description": "Process or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves sub process definitions that are defined in given process within given container",
        "tags": [
          "Process and task definitions :: BPM"
        ]
      }
    },
    "/server/containers/{id}/processes/definitions/{pId}/tasks/service": {
      "get": {
        "description": "",
        "operationId": "getServiceTasks",
        "parameters": [
          {
            "description": "container id where the process definition resides",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "process id that the service task definitions should be retrieved from",
            "in": "path",
            "name": "pId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/process-service-tasks"
            }
          },
          "404": {
            "description": "Process or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves service tasks definitions that are present in given process and container",
        "tags": [
          "Process and task definitions :: BPM"
        ]
      }
    },
    "/server/containers/{id}/processes/definitions/{pId}/tasks/users": {
      "get": {
        "description": "",
        "operationId": "getTasksDefinitions",
        "parameters": [
          {
            "description": "container id where the process definition resides",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "process id that the user task definitions should be retrieved from",
            "in": "path",
            "name": "pId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/user-task-definitions"
            }
          },
          "404": {
            "description": "Process or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves user tasks definitions that are present in given process and container",
        "tags": [
          "Process and task definitions :: BPM"
        ]
      }
    },
    "/server/containers/{id}/processes/definitions/{pId}/tasks/users/{taskName}/inputs": {
      "get": {
        "description": "",
        "operationId": "getTaskInputMappings",
        "parameters": [
          {
            "description": "container id where the process definition resides",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "process id that given task belongs to",
            "in": "path",
            "name": "pId",
            "required": true,
            "type": "string"
          },
          {
            "description": "task name that input variable definitions should be retrieved for",
            "in": "path",
            "name": "taskName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/process-task-inputs"
            }
          },
          "404": {
            "description": "Process or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves input variables defined on a given user task",
        "tags": [
          "Process and task definitions :: BPM"
        ]
      }
    },
    "/server/containers/{id}/processes/definitions/{pId}/tasks/users/{taskName}/outputs": {
      "get": {
        "description": "",
        "operationId": "getTaskOutputMappings",
        "parameters": [
          {
            "description": "container id where the process definition resides",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "process id that given task belongs to",
            "in": "path",
            "name": "pId",
            "required": true,
            "type": "string"
          },
          {
            "description": "task name that output variable definitions should be retrieved for",
            "in": "path",
            "name": "taskName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/process-task-outputs"
            }
          },
          "404": {
            "description": "Process or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves output variables defined on a given user task",
        "tags": [
          "Process and task definitions :: BPM"
        ]
      }
    },
    "/server/containers/{id}/processes/definitions/{pId}/variables": {
      "get": {
        "description": "",
        "operationId": "getProcessVariables",
        "parameters": [
          {
            "description": "container id where the process definition resides",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "process id that the variable definitions should be retrieved from",
            "in": "path",
            "name": "pId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/process-variables"
            }
          },
          "404": {
            "description": "Process or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves process variables definitions that are present in given process and container",
        "tags": [
          "Process and task definitions :: BPM"
        ]
      }
    },
    "/server/containers/{id}/processes/instances": {
      "delete": {
        "description": "",
        "operationId": "abortProcessInstances",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "list of identifiers of the process instances to be aborted",
            "in": "query",
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "name": "instanceId",
            "required": true,
            "type": "array"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Process instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Aborts active process instances identified by given list of identifiers",
        "tags": [
          "Process instances :: BPM"
        ]
      },
      "get": {
        "description": "",
        "operationId": "getProcessInstancesByDeploymentId",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "optional process instance status (active, completed, aborted) - defaults ot active (1) only",
            "in": "query",
            "items": {
              "enum": [
                1,
                2,
                3
              ],
              "format": "int32",
              "type": "integer"
            },
            "name": "status",
            "required": false,
            "type": "array"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/process-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves process instances that belong to given container",
        "tags": [
          "Process instances :: BPM"
        ]
      }
    },
    "/server/containers/{id}/processes/instances/signal/{sName}": {
      "post": {
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "description": "",
        "operationId": "signalProcessInstances",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "list of identifiers of the process instances to be signaled",
            "in": "query",
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "name": "instanceId",
            "required": true,
            "type": "array"
          },
          {
            "description": "signal name to be send to process instance",
            "in": "path",
            "name": "sName",
            "required": true,
            "type": "string"
          },
          {
            "description": "optional event data - any type can be provided",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Process instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Signals active process instances identified by given ids with singal name and optional event data",
        "tags": [
          "Process instances :: BPM"
        ]
      }
    },
    "/server/containers/{id}/processes/instances/{pInstanceId}": {
      "delete": {
        "description": "",
        "operationId": "abortProcessInstance",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the process instance to be aborted",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Process instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Aborts active process instance identified by given id",
        "tags": [
          "Process instances :: BPM"
        ]
      },
      "get": {
        "description": "",
        "operationId": "getProcessInstance",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the process instance to be fetched",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "indicates if process instance variables should be loaded or not",
            "in": "query",
            "name": "withVars",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/process-instance"
            }
          },
          "404": {
            "description": "Process instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves process instance identified by given id optionally with variables (variables will be loaded only for active process instance)",
        "tags": [
          "Process instances :: BPM"
        ]
      }
    },
    "/server/containers/{id}/processes/instances/{pInstanceId}/nodes/instances": {
      "get": {
        "description": "",
        "operationId": "getProcessInstanceHistory",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the process instance that history should be collected for",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "instructs if active nodes only should be collected, defaults to false",
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "instructs if completed nodes only should be collected, defaults to false",
            "in": "query",
            "name": "completedOnly",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/node-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves node instances for given process instance. Depending on provided query parameters (activeOnly or completedOnly) will return active and/or completes nodes",
        "tags": [
          "Process instances :: BPM"
        ]
      }
    },
    "/server/containers/{id}/processes/instances/{pInstanceId}/processes": {
      "get": {
        "description": "",
        "operationId": "getProcessInstances",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the parent process instance that process instances should be collected for",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "collectionFormat": "multi",
            "description": "optional process instance status (active, completed, aborted) - defaults ot active (1) only",
            "in": "query",
            "items": {
              "enum": [
                1,
                2,
                3
              ],
              "format": "int32",
              "type": "integer"
            },
            "name": "status",
            "required": false,
            "type": "array"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/process-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves process instances that belong to given container and have given parent process instance, optionally allow to filter by process instance state.",
        "tags": [
          "Process instances :: BPM"
        ]
      }
    },
    "/server/containers/{id}/processes/instances/{pInstanceId}/signal/{sName}": {
      "post": {
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "description": "",
        "operationId": "signalProcessInstance",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the process instance to be signaled",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "signal name to be send to process instance",
            "in": "path",
            "name": "sName",
            "required": true,
            "type": "string"
          },
          {
            "description": "optional event data - any type can be provided",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Process instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Signals active process instance identified by given id with singal name and optional event data",
        "tags": [
          "Process instances :: BPM"
        ]
      }
    },
    "/server/containers/{id}/processes/instances/{pInstanceId}/signals": {
      "get": {
        "description": "",
        "operationId": "getAvailableSignals",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the process instance that signals should be collected for",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Process instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves active process instance's (identified by given id) active signals",
        "tags": [
          "Process instances :: BPM"
        ]
      }
    },
    "/server/containers/{id}/processes/instances/{pInstanceId}/variable/{varName}": {
      "get": {
        "description": "",
        "operationId": "getProcessInstanceVariable",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the process instance that variable should be retrieved from",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "variable name to be retrieved",
            "in": "path",
            "name": "varName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "Process instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves active process instance's (identified by given id) variable given as variable name",
        "tags": [
          "Process instances :: BPM"
        ]
      },
      "put": {
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "description": "",
        "operationId": "setProcessVariable",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the process instance to be updated",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "name of the variable to be set/updated",
            "in": "path",
            "name": "varName",
            "required": true,
            "type": "string"
          },
          {
            "description": "variable data - any type can be provided",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Process instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Updates active process instance's (identified by given id) variable with given name",
        "tags": [
          "Process instances :: BPM"
        ]
      }
    },
    "/server/containers/{id}/processes/instances/{pInstanceId}/variables": {
      "get": {
        "description": "",
        "operationId": "getProcessInstanceVariables",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the process instance that variables should be retrieved from",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "additionalProperties": {
                "type": "object"
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Process instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves active process instance's (identified by given id) variables, variables are returned as map where key is the variable name (string) and value is variable value (any type)",
        "tags": [
          "Process instances :: BPM"
        ]
      },
      "post": {
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "description": "",
        "operationId": "setProcessVariables",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the process instance to be updated",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "variable data give as map",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Process instance or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Updates active process instance's (identified by given id) variables given as map in the body",
        "tags": [
          "Process instances :: BPM"
        ]
      }
    },
    "/server/containers/{id}/processes/instances/{pInstanceId}/variables/instances": {
      "get": {
        "description": "",
        "operationId": "getVariablesCurrentState",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the process instance that variables state should be collected for",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/variable-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves variables last value (from audit logs) for given process instance",
        "tags": [
          "Process instances :: BPM"
        ]
      }
    },
    "/server/containers/{id}/processes/instances/{pInstanceId}/variables/instances/{varName}": {
      "get": {
        "description": "",
        "operationId": "getVariableHistory",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the process instance that variable history should be collected for",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "name of the variables that history should be collected for",
            "in": "path",
            "name": "varName",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/variable-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves variable history (from audit logs) for given variable name that belongs to process instance",
        "tags": [
          "Process instances :: BPM"
        ]
      }
    },
    "/server/containers/{id}/processes/instances/{pInstanceId}/workitems": {
      "get": {
        "description": "",
        "operationId": "getWorkItemByProcessInstance",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the process instance that work items belong to",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/work-item-instance-list"
            }
          },
          "404": {
            "description": "Process instance, Work Item or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves work items within process instance and container",
        "tags": [
          "Process instances :: BPM"
        ]
      }
    },
    "/server/containers/{id}/processes/instances/{pInstanceId}/workitems/{workItemId}": {
      "get": {
        "description": "",
        "operationId": "getWorkItem",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the process instance that work item belongs to",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "identifier of the work item to retrieve",
            "format": "int64",
            "in": "path",
            "name": "workItemId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/work-item-instance"
            }
          },
          "404": {
            "description": "Process instance, Work Item or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves work item identified by workItemId within process instance and container",
        "tags": [
          "Process instances :: BPM"
        ]
      }
    },
    "/server/containers/{id}/processes/instances/{pInstanceId}/workitems/{workItemId}/aborted": {
      "put": {
        "description": "",
        "operationId": "abortWorkItem",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the process instance that work item belongs to",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "identifier of the work item to abort",
            "format": "int64",
            "in": "path",
            "name": "workItemId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Process instance, Work Item or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Aborts work item identified by workItemId within process instance and container",
        "tags": [
          "Process instances :: BPM"
        ]
      }
    },
    "/server/containers/{id}/processes/instances/{pInstanceId}/workitems/{workItemId}/completed": {
      "put": {
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "description": "",
        "operationId": "completeWorkItem",
        "parameters": [
          {
            "description": "container id that process instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the process instance that work item belongs to",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "identifier of the work item to complete",
            "format": "int64",
            "in": "path",
            "name": "workItemId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "optional outcome data give as map",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Process instance, Work Item or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Completes work item identified by workItemId within process instance and container. Optionally completion can provide outcome data - as map",
        "tags": [
          "Process instances :: BPM"
        ]
      }
    },
    "/server/containers/{id}/processes/{pId}/instances": {
      "post": {
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "description": "",
        "operationId": "startProcess",
        "parameters": [
          {
            "description": "container id where the process definition resides",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "process id that new instance should be created from",
            "in": "path",
            "name": "pId",
            "required": true,
            "type": "string"
          },
          {
            "description": "optional map of process variables",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          "404": {
            "description": "Process ID or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Starts new process instance of given process definition within given container with optional variables",
        "tags": [
          "Process instances :: BPM"
        ]
      }
    },
    "/server/containers/{id}/processes/{pId}/instances/correlation/{correlationKey}": {
      "post": {
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "description": "",
        "operationId": "startProcessWithCorrelation",
        "parameters": [
          {
            "description": "container id where the process definition resides",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "process id that new instance should be created from",
            "in": "path",
            "name": "pId",
            "required": true,
            "type": "string"
          },
          {
            "description": "correlation key to be assigned to process instance",
            "in": "path",
            "name": "correlationKey",
            "required": true,
            "type": "string"
          },
          {
            "description": "optional map of process variables",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          "404": {
            "description": "Process ID or Container Id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Starts new process instance with correlation key of given process definition within given container with optional variables",
        "tags": [
          "Process instances :: BPM"
        ]
      }
    },
    "/server/containers/{id}/release-id": {
      "get": {
        "description": "",
        "operationId": "getReleaseId",
        "parameters": [
          {
            "description": "Container id that release id should be loaded from",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/response"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves release id of the KIE container with given id",
        "tags": [
          "KIE Server :: Core"
        ]
      },
      "post": {
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "description": "",
        "operationId": "updateReleaseId",
        "parameters": [
          {
            "description": "Container id that release id should be upgraded",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Release Id to be upgraded to as ReleaseId type",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/response"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Updates release id of the KIE container with given id to provided release id",
        "tags": [
          "KIE Server :: Core"
        ]
      }
    },
    "/server/containers/{id}/scanner": {
      "get": {
        "description": "",
        "operationId": "getScannerInfo",
        "parameters": [
          {
            "description": "Container id for scanner to be loaded",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/response"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves stanner information for given container",
        "tags": [
          "KIE Server :: Core"
        ]
      },
      "post": {
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "description": "",
        "operationId": "updateScanner",
        "parameters": [
          {
            "description": "Container id for scanner to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scanner information given as KieScannerResource type",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/response"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Updates scanner for given container",
        "tags": [
          "KIE Server :: Core"
        ]
      }
    },
    "/server/containers/{id}/solvers": {
      "get": {
        "description": "",
        "operationId": "getSolvers",
        "parameters": [
          {
            "description": "container id where the solvers reside",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/solvers"
            }
          },
          "404": {
            "description": "Container does not exist or failure in creating solver"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves solvers from given container",
        "tags": [
          "Planning and solvers :: BRP"
        ]
      }
    },
    "/server/containers/{id}/solvers/{solverId}": {
      "delete": {
        "description": "",
        "operationId": "disposeSolver",
        "parameters": [
          {
            "description": "container id where the solver resides",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the solver",
            "in": "path",
            "name": "solverId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Container does not exist or failure in creating solver"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Disposes given solver",
        "tags": [
          "Planning and solvers :: BRP"
        ]
      },
      "get": {
        "description": "",
        "operationId": "getSolver",
        "parameters": [
          {
            "description": "container id where the solver resides",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the solver",
            "in": "path",
            "name": "solverId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/solver-instance"
            }
          },
          "404": {
            "description": "Container does not exist or failure in creating solver"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves solver by its identifier from given container",
        "tags": [
          "Planning and solvers :: BRP"
        ]
      },
      "put": {
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "description": "",
        "operationId": "createSolver",
        "parameters": [
          {
            "description": "container id where the solver config resides",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the solver to create",
            "in": "path",
            "name": "solverId",
            "required": true,
            "type": "string"
          },
          {
            "description": "solver instance details as SolverInstance type",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/solver-instance"
            }
          },
          "400": {
            "description": "Container does not exist or failure in creating solver"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Creates solver within given container",
        "tags": [
          "Planning and solvers :: BRP"
        ]
      }
    },
    "/server/containers/{id}/solvers/{solverId}/bestsolution": {
      "get": {
        "description": "",
        "operationId": "getSolverWithBestSolution",
        "parameters": [
          {
            "description": "container id where the solver resides",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the solver",
            "in": "path",
            "name": "solverId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/solver-instance"
            }
          },
          "404": {
            "description": "Container does not exist or failure in creating solver"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves best solution from solver within container",
        "tags": [
          "Planning and solvers :: BRP"
        ]
      }
    },
    "/server/containers/{id}/solvers/{solverId}/problemfactchanges": {
      "post": {
        "description": "",
        "operationId": "addProblemFactChanges",
        "parameters": [
          {
            "description": "container id where the solver resides",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the solver",
            "in": "path",
            "name": "solverId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Problem fact changes, either single one or a list of them",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Container does not exist or failure in creating solver"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Adds problem fact changes to given solver",
        "tags": [
          "Planning and solvers :: BRP"
        ]
      }
    },
    "/server/containers/{id}/solvers/{solverId}/problemfactchanges/processed": {
      "get": {
        "description": "",
        "operationId": "isEveryProblemFactChangeProcessed",
        "parameters": [
          {
            "description": "container id where the solver resides",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the solver",
            "in": "path",
            "name": "solverId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "404": {
            "description": "Container does not exist or failure in creating solver"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves status if problem fact changes have been processed in given solver",
        "tags": [
          "Planning and solvers :: BRP"
        ]
      }
    },
    "/server/containers/{id}/solvers/{solverId}/state/solving": {
      "post": {
        "description": "",
        "operationId": "solvePlanningProblem",
        "parameters": [
          {
            "description": "container id where the solver resides",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the solver",
            "in": "path",
            "name": "solverId",
            "required": true,
            "type": "string"
          },
          {
            "description": "planning problem",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Container does not exist or failure in creating solver"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Solves given planning problem with given solver",
        "tags": [
          "Planning and solvers :: BRP"
        ]
      }
    },
    "/server/containers/{id}/solvers/{solverId}/state/terminating-early": {
      "post": {
        "description": "",
        "operationId": "terminateSolverEarly",
        "parameters": [
          {
            "description": "container id where the solver resides",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the solver",
            "in": "path",
            "name": "solverId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Container does not exist or failure in creating solver"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Terminates early running solver with given id within container",
        "tags": [
          "Planning and solvers :: BRP"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}": {
      "get": {
        "description": "",
        "operationId": "getTask",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that should be loaded",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "optionally loads task input data",
            "in": "query",
            "name": "withInputData",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "optionally loads task output data",
            "in": "query",
            "name": "withOutputData",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "optionally loads task people assignments",
            "in": "query",
            "name": "withAssignments",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/task-instance"
            }
          },
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves task with given id that belongs to given container, optionally loads its input, output data and assignments",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      },
      "put": {
        "description": "",
        "operationId": "update",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that should be updated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled",
            "in": "query",
            "name": "user",
            "required": false,
            "type": "string"
          },
          {
            "description": "task instance with updates as TaskInstance type",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Updates task with given id that belongs to given container with given task instance details in body, updates name, description, priority, expiration date, form name, input and output variables",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/attachments": {
      "get": {
        "description": "",
        "operationId": "getAttachmentsByTaskId",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that attachments should be loaded for",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/task-attachment-list"
            }
          },
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves attachments from task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      },
      "post": {
        "description": "",
        "operationId": "addAttachment",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that attachment should be added to",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled",
            "in": "query",
            "name": "user",
            "required": false,
            "type": "string"
          },
          {
            "description": "name of the attachment to be added",
            "in": "query",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "attachment content, any type can be provided",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Adds attachment to task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/attachments/{attachmentId}": {
      "delete": {
        "description": "",
        "operationId": "deleteAttachment",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that attachment belongs to",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "identifier of the attachment to be deleted",
            "format": "int64",
            "in": "path",
            "name": "attachmentId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Deletes attachment from task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      },
      "get": {
        "description": "",
        "operationId": "getAttachmentById",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that attachment belongs to",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "identifier of the attachment to be loaded",
            "format": "int64",
            "in": "path",
            "name": "attachmentId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/task-attachment"
            }
          },
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves attachment with given id from task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/attachments/{attachmentId}/content": {
      "get": {
        "description": "",
        "operationId": "getAttachmentContentById",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that attachment belongs to",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "identifier of the attachment that content should be loaded from",
            "format": "int64",
            "in": "path",
            "name": "attachmentId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves attachment's content with given id from task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/comments": {
      "get": {
        "description": "",
        "operationId": "getCommentsByTaskId",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that comments should be loaded for",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/task-comment-list"
            }
          },
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves comments from task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      },
      "post": {
        "description": "",
        "operationId": "addComment",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that comment should be added to",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "comment data as TaskComment",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Adds comment to task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/comments/{commentId}": {
      "delete": {
        "description": "",
        "operationId": "deleteComment",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that comment belongs to",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "identifier of the comment to be deleted",
            "format": "int64",
            "in": "path",
            "name": "commentId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Deletes comment from task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      },
      "get": {
        "description": "",
        "operationId": "getCommentById",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that comment belongs to",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "identifier of the comment to be loaded",
            "format": "int64",
            "in": "path",
            "name": "commentId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/task-comment"
            }
          },
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves comment with given id from task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/contents/input": {
      "get": {
        "description": "",
        "operationId": "getTaskInputContentByTaskId",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that input data should be loaded from",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "additionalProperties": {
                "type": "object"
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves input date from task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/contents/output": {
      "get": {
        "description": "",
        "operationId": "getTaskOutputContentByTaskId",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that output data should be loaded from",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "additionalProperties": {
                "type": "object"
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves output date from task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      },
      "put": {
        "description": "",
        "operationId": "saveContent",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that data should be saved into",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "output data to be saved as Map ",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Saves content on task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/contents/{contentId}": {
      "delete": {
        "description": "",
        "operationId": "deleteContent",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that content belongs to",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "identifier of the content to be deleted",
            "format": "int64",
            "in": "path",
            "name": "contentId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Deletes content from task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/description": {
      "put": {
        "description": "",
        "operationId": "setDescription",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance where description should be updated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "description as String",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Sets description on task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/events": {
      "get": {
        "description": "",
        "operationId": "getTaskEvents",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that events should be loaded for",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/task-event-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves task events for given task id and applies pagination",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/expiration": {
      "put": {
        "description": "",
        "operationId": "setExpirationDate",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance where expiration date should be updated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "expiration date as Date",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Sets expiration date on task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/name": {
      "put": {
        "description": "",
        "operationId": "setName",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance where name should be updated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "name as String",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Sets name on task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/priority": {
      "put": {
        "description": "",
        "operationId": "setPriority",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance where priority should be updated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "priority as Integer",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Sets priority on task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/skipable": {
      "put": {
        "description": "",
        "operationId": "setSkipable",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance where skipable flag should be updated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "skipable flag as Boolean",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Sets skipable flag on task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/states/activated": {
      "put": {
        "description": "",
        "operationId": "activate",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that should be activated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled",
            "in": "query",
            "name": "user",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Activates task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/states/claimed": {
      "put": {
        "description": "",
        "operationId": "claim",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that should be claimed",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled",
            "in": "query",
            "name": "user",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Claims task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/states/completed": {
      "put": {
        "description": "",
        "operationId": "complete",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that should be completed",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled",
            "in": "query",
            "name": "user",
            "required": false,
            "type": "string"
          },
          {
            "description": "optional flag that allows to directlu claim and start task (if needed) before completion",
            "in": "query",
            "name": "auto-progress",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "optional map of output variables",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Completes task with given id that belongs to given container, optionally it can claim and start task when auto-progress is used",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/states/delegated": {
      "put": {
        "description": "",
        "operationId": "delegate",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that should be delegated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled",
            "in": "query",
            "name": "user",
            "required": false,
            "type": "string"
          },
          {
            "description": "user that task should be dalegated to",
            "in": "query",
            "name": "targetUser",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Delegates task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/states/exited": {
      "put": {
        "description": "",
        "operationId": "exit",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that should be exited",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled",
            "in": "query",
            "name": "user",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Exists task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/states/failed": {
      "put": {
        "description": "",
        "operationId": "fail",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that should be failed",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled",
            "in": "query",
            "name": "user",
            "required": false,
            "type": "string"
          },
          {
            "description": "optional map of output variables",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Fails task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/states/forwarded": {
      "put": {
        "description": "",
        "operationId": "forward",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that should be forwarded",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled",
            "in": "query",
            "name": "user",
            "required": false,
            "type": "string"
          },
          {
            "description": "user that the task should be forwarded to",
            "in": "query",
            "name": "targetUser",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Forwards task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/states/nominated": {
      "put": {
        "description": "",
        "operationId": "nominate",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that should be nominated",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled",
            "in": "query",
            "name": "user",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "list of users that the task should be nominated to",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "potOwner",
            "required": true,
            "type": "array"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Nominates task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/states/released": {
      "put": {
        "description": "",
        "operationId": "release",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that should be released",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled",
            "in": "query",
            "name": "user",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Releases task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/states/resumed": {
      "put": {
        "description": "",
        "operationId": "resume",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that should be resumed",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled",
            "in": "query",
            "name": "user",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Resumes task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/states/skipped": {
      "put": {
        "description": "",
        "operationId": "skip",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that should be skipped",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled",
            "in": "query",
            "name": "user",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Skips task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/states/started": {
      "put": {
        "description": "",
        "operationId": "start",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that should be started",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled",
            "in": "query",
            "name": "user",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Starts task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/states/stopped": {
      "put": {
        "description": "",
        "operationId": "stop",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that should be stopped",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled",
            "in": "query",
            "name": "user",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Stops task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/containers/{id}/tasks/{tInstanceId}/states/suspended": {
      "put": {
        "description": "",
        "operationId": "suspend",
        "parameters": [
          {
            "description": "container id that task instance belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the task instance that should be suspended",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled",
            "in": "query",
            "name": "user",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Task with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Suspends task with given id that belongs to given container",
        "tags": [
          "User task operations and queries :: BPM"
        ]
      }
    },
    "/server/documents": {
      "get": {
        "description": "",
        "operationId": "listDocuments",
        "parameters": [
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/document-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves documents that are stored in the system, with pagination",
        "tags": [
          "Documents :: BPM"
        ]
      },
      "post": {
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "description": "",
        "operationId": "createDocument",
        "parameters": [
          {
            "description": "document content represented as DocumentInstance",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Creates new document based on given content (body)",
        "tags": [
          "Documents :: BPM"
        ]
      }
    },
    "/server/documents/{documentId}": {
      "delete": {
        "description": "",
        "operationId": "deleteDocument",
        "parameters": [
          {
            "description": "document id of a document that should be deleted",
            "in": "path",
            "name": "documentId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Document with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Deletes document identified by given document id",
        "tags": [
          "Documents :: BPM"
        ]
      },
      "get": {
        "description": "",
        "operationId": "getDocument",
        "parameters": [
          {
            "description": "document id of a document that should be retruned",
            "in": "path",
            "name": "documentId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/document-instance"
            }
          },
          "404": {
            "description": "Document with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves document identified by given documentId",
        "tags": [
          "Documents :: BPM"
        ]
      },
      "put": {
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "description": "",
        "operationId": "updateDocument",
        "parameters": [
          {
            "description": "document id of a document that should be updated",
            "in": "path",
            "name": "documentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "document content represented as DocumentInstance",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Document with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Updates document identified by given document id based on given content (body)",
        "tags": [
          "Documents :: BPM"
        ]
      }
    },
    "/server/documents/{documentId}/content": {
      "get": {
        "description": "",
        "operationId": "getDocumentContent",
        "parameters": [
          {
            "description": "document id of a document that content should be retruned from",
            "in": "path",
            "name": "documentId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "items": {
                "format": "byte",
                "type": "string"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Document with given id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves document's content identified by given documentId",
        "tags": [
          "Documents :: BPM"
        ]
      }
    },
    "/server/jobs": {
      "get": {
        "description": "",
        "operationId": "getRequestsByStatus",
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "optional job status (QUEUED, DONE, CANCELLED, ERROR, RETRYING, RUNNING)",
            "in": "query",
            "items": {
              "enum": [
                "QUEUED",
                "DONE",
                "CANCELLED",
                "ERROR",
                "RETRYING",
                "RUNNING"
              ],
              "type": "string"
            },
            "name": "status",
            "required": true,
            "type": "array"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/request-info-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves asynchronous jobs filtered by status",
        "tags": [
          "Asynchronous jobs :: BPM"
        ]
      },
      "post": {
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "description": "",
        "operationId": "scheduleRequest",
        "parameters": [
          {
            "description": "optional container id that the job should be associated with",
            "in": "query",
            "name": "containerId",
            "required": false,
            "type": "string"
          },
          {
            "description": "asynchronous job definition represented as JobRequestInstance",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Schedules new asynchronous job based on given body",
        "tags": [
          "Asynchronous jobs :: BPM"
        ]
      }
    },
    "/server/jobs/commands/{cmd}": {
      "get": {
        "description": "",
        "operationId": "getRequestsByCommand",
        "parameters": [
          {
            "description": "name of the command that asynchornous jobs should be found for",
            "in": "path",
            "name": "cmd",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "optional job status (QUEUED, DONE, CANCELLED, ERROR, RETRYING, RUNNING)",
            "in": "query",
            "items": {
              "enum": [
                "QUEUED",
                "DONE",
                "CANCELLED",
                "ERROR",
                "RETRYING",
                "RUNNING"
              ],
              "type": "string"
            },
            "name": "status",
            "required": false,
            "type": "array"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/request-info-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves asynchronous jobs by command",
        "tags": [
          "Asynchronous jobs :: BPM"
        ]
      }
    },
    "/server/jobs/containers/{id}": {
      "get": {
        "description": "",
        "operationId": "getRequestsByContainer",
        "parameters": [
          {
            "description": "identifier of the container that asynchornous jobs should be found for",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "optional job status (QUEUED, DONE, CANCELLED, ERROR, RETRYING, RUNNING)",
            "in": "query",
            "items": {
              "enum": [
                "QUEUED",
                "DONE",
                "CANCELLED",
                "ERROR",
                "RETRYING",
                "RUNNING"
              ],
              "type": "string"
            },
            "name": "status",
            "required": false,
            "type": "array"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/request-info-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves asynchronous jobs by container",
        "tags": [
          "Asynchronous jobs :: BPM"
        ]
      }
    },
    "/server/jobs/keys/{key}": {
      "get": {
        "description": "",
        "operationId": "getRequestsByBusinessKey",
        "parameters": [
          {
            "description": "identifier of the business key that asynchornous jobs should be found for",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "optional job status (QUEUED, DONE, CANCELLED, ERROR, RETRYING, RUNNING)",
            "in": "query",
            "items": {
              "enum": [
                "QUEUED",
                "DONE",
                "CANCELLED",
                "ERROR",
                "RETRYING",
                "RUNNING"
              ],
              "type": "string"
            },
            "name": "status",
            "required": false,
            "type": "array"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/request-info-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves asynchronous jobs by business key",
        "tags": [
          "Asynchronous jobs :: BPM"
        ]
      }
    },
    "/server/jobs/processes/instances/{pInstanceId}": {
      "get": {
        "description": "",
        "operationId": "getRequestsByProcessInstance",
        "parameters": [
          {
            "description": "identifier of the process instance that asynchornous jobs should be found for",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "collectionFormat": "multi",
            "description": "optional job status (QUEUED, DONE, CANCELLED, ERROR, RETRYING, RUNNING)",
            "in": "query",
            "items": {
              "enum": [
                "QUEUED",
                "DONE",
                "CANCELLED",
                "ERROR",
                "RETRYING",
                "RUNNING"
              ],
              "type": "string"
            },
            "name": "status",
            "required": false,
            "type": "array"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/request-info-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves asynchronous jobs by process instance id",
        "tags": [
          "Asynchronous jobs :: BPM"
        ]
      }
    },
    "/server/jobs/{jobId}": {
      "delete": {
        "description": "",
        "operationId": "cancelRequest",
        "parameters": [
          {
            "description": "identifier of the asynchronous job to be canceled",
            "format": "int64",
            "in": "path",
            "name": "jobId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Cancels active asynchronous job identified by given jobId",
        "tags": [
          "Asynchronous jobs :: BPM"
        ]
      },
      "get": {
        "description": "",
        "operationId": "getRequestById",
        "parameters": [
          {
            "description": "identifier of the asynchronous job to be retrieved",
            "format": "int64",
            "in": "path",
            "name": "jobId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "optional flag that indicats if errors should be loaded as well",
            "in": "query",
            "name": "withErrors",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "optional flag that indicats if input/output data should be loaded as well",
            "in": "query",
            "name": "withData",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/request-info-instance"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves asynchronous job by given jobId",
        "tags": [
          "Asynchronous jobs :: BPM"
        ]
      },
      "put": {
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "description": "",
        "operationId": "requeueRequest",
        "parameters": [
          {
            "description": "identifier of the asynchronous job to be requeued",
            "format": "int64",
            "in": "path",
            "name": "jobId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Requeues failed asynchronous job identified by given jobId",
        "tags": [
          "Asynchronous jobs :: BPM"
        ]
      }
    },
    "/server/jobs/{jobId}/data": {
      "post": {
        "description": "",
        "operationId": "updateRequestData",
        "parameters": [
          {
            "description": "identifier of the asynchronous job to be updated",
            "format": "int64",
            "in": "path",
            "name": "jobId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "optional container id that the job should be associated with",
            "in": "query",
            "name": "containerId",
            "required": false,
            "type": "string"
          },
          {
            "description": "data to be updated on the asynchronous job represented as Map",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Updates active asynchronous job's data (identified by given jobId)",
        "tags": [
          "Asynchronous jobs :: BPM"
        ]
      }
    },
    "/server/queries/cases": {
      "get": {
        "description": "",
        "operationId": "getCaseDefinitions",
        "parameters": [
          {
            "description": "case definition id or name that case definitions will be filtered by",
            "in": "query",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/case-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves case definitions with filtering by name or id of the case definition and applies pagination",
        "tags": [
          "Queries - case definitions and instances :: Case Management"
        ]
      }
    },
    "/server/queries/cases/instances": {
      "get": {
        "description": "",
        "operationId": "getCaseInstances",
        "parameters": [
          {
            "description": "data item name that case instances will be filtered by",
            "in": "query",
            "name": "dataItemName",
            "required": false,
            "type": "string"
          },
          {
            "description": "data item value that case instances will be filtered by",
            "in": "query",
            "name": "dataItemValue",
            "required": false,
            "type": "string"
          },
          {
            "description": "case instance owner that case instances will be filtered by",
            "in": "query",
            "name": "owner",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "optional case instance status (open, closed, canceled) - defaults ot open (1) only",
            "in": "query",
            "items": {
              "enum": [
                "open",
                "closed",
                "cancelled"
              ],
              "type": "string"
            },
            "name": "status",
            "required": false,
            "type": "array"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/case-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves case instances with authntication checks and applies pagination, allows to filter by data (case file) name and value, owner and case instance status",
        "tags": [
          "Queries - case definitions and instances :: Case Management"
        ]
      }
    },
    "/server/queries/cases/instances/{caseId}/caseFile": {
      "get": {
        "description": "",
        "operationId": "getCaseInstanceDataItems",
        "parameters": [
          {
            "description": "case instance identifier that data items should belong to",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "optionally filter by data item names",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "name",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "optionally filter by data item types",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "type",
            "required": false,
            "type": "array"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/case-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves case instance data items, allows to filter by name or type of data and applies pagination",
        "tags": [
          "Queries - case definitions and instances :: Case Management"
        ]
      }
    },
    "/server/queries/cases/instances/{caseId}/tasks/instances/admins": {
      "get": {
        "description": "",
        "operationId": "getCaseInstanceTasksAsAdmin",
        "parameters": [
          {
            "description": "case instance identifier that tasks should belong to",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "description": "optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled",
            "in": "query",
            "name": "user",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "optional task status (Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete)",
            "in": "query",
            "items": {
              "enum": [
                "Created",
                "Ready",
                "Reserved",
                "InProgress",
                "Suspended",
                "Completed",
                "Failed",
                "Error",
                "Exited",
                "Obsolete"
              ],
              "type": "string"
            },
            "name": "status",
            "required": false,
            "type": "array"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/case-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves case instance tasks assigned as business admin, allows to filter by task status and applies pagination",
        "tags": [
          "Queries - case definitions and instances :: Case Management"
        ]
      }
    },
    "/server/queries/cases/instances/{caseId}/tasks/instances/pot-owners": {
      "get": {
        "description": "",
        "operationId": "getCaseInstanceTasksAsPotentialOwner",
        "parameters": [
          {
            "description": "case instance identifier that tasks should belong to",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "description": "optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled",
            "in": "query",
            "name": "user",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "optional task status (Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete)",
            "in": "query",
            "items": {
              "enum": [
                "Created",
                "Ready",
                "Reserved",
                "InProgress",
                "Suspended",
                "Completed",
                "Failed",
                "Error",
                "Exited",
                "Obsolete"
              ],
              "type": "string"
            },
            "name": "status",
            "required": false,
            "type": "array"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/case-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves case instance tasks assigned as potential owner, allows to filter by task status and applies pagination",
        "tags": [
          "Queries - case definitions and instances :: Case Management"
        ]
      }
    },
    "/server/queries/cases/instances/{caseId}/tasks/instances/stakeholders": {
      "get": {
        "description": "",
        "operationId": "getCaseInstanceTasksAsStakeholder",
        "parameters": [
          {
            "description": "case instance identifier that tasks should belong to",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "description": "optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled",
            "in": "query",
            "name": "user",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "optional task status (Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete)",
            "in": "query",
            "items": {
              "enum": [
                "Created",
                "Ready",
                "Reserved",
                "InProgress",
                "Suspended",
                "Completed",
                "Failed",
                "Error",
                "Exited",
                "Obsolete"
              ],
              "type": "string"
            },
            "name": "status",
            "required": false,
            "type": "array"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/case-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves case instance tasks assigned as stakeholder, allows to filter by task status and applies pagination",
        "tags": [
          "Queries - case definitions and instances :: Case Management"
        ]
      }
    },
    "/server/queries/cases/processes": {
      "get": {
        "description": "",
        "operationId": "getProcessDefinitions",
        "parameters": [
          {
            "description": "process definition id or name that process definitions will be filtered by",
            "in": "query",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/case-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves process definitions with filtering by name or id of the process definition and applies pagination",
        "tags": [
          "Queries - case definitions and instances :: Case Management"
        ]
      }
    },
    "/server/queries/cases/{caseRoleName}/instances": {
      "get": {
        "description": "",
        "operationId": "getCaseInstancesByRole",
        "parameters": [
          {
            "description": "case role that instances should be found for",
            "in": "path",
            "name": "caseRoleName",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "optional case instance status (open, closed, canceled) - defaults ot open (1) only",
            "in": "query",
            "items": {
              "enum": [
                "open",
                "closed",
                "cancelled"
              ],
              "type": "string"
            },
            "name": "status",
            "required": false,
            "type": "array"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/case-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves case instances where given user is involed in given role and applies pagination, allows to filter by case instance status",
        "tags": [
          "Queries - case definitions and instances :: Case Management"
        ]
      }
    },
    "/server/queries/cases/{id}/processes": {
      "get": {
        "description": "",
        "operationId": "getProcessDefinitionsByContainer",
        "parameters": [
          {
            "description": "container id that process definitions should be filtered by",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/case-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves process definitions that belong to given container and applies pagination",
        "tags": [
          "Queries - case definitions and instances :: Case Management"
        ]
      }
    },
    "/server/queries/containers/{id}/process/instances": {
      "get": {
        "description": "",
        "operationId": "getProcessInstancesByDeploymentId",
        "parameters": [
          {
            "description": "container id to filter process instance",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "optional process instance status (active, completed, aborted) - defaults ot active (1) only",
            "in": "query",
            "items": {
              "enum": [
                1,
                2,
                3
              ],
              "format": "int32",
              "type": "integer"
            },
            "name": "status",
            "required": false,
            "type": "array"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/process-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves process instances filtered by container. Applies pagination by default and allows to specify sorting",
        "tags": [
          "Queries - processes, nodes, variables and tasks :: BPM"
        ]
      }
    },
    "/server/queries/containers/{id}/processes/definitions": {
      "get": {
        "description": "",
        "operationId": "getProcessesByDeploymentId",
        "parameters": [
          {
            "description": "container id to filter process definitions",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/process-definitions"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves process definitions that belong to given container",
        "tags": [
          "Queries - processes, nodes, variables and tasks :: BPM"
        ]
      }
    },
    "/server/queries/containers/{id}/processes/definitions/{pId}": {
      "get": {
        "description": "",
        "operationId": "getProcessesByDeploymentIdProcessId",
        "parameters": [
          {
            "description": "container id that process definition belongs to",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "process id to load process definition",
            "in": "path",
            "name": "pId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/process-definition"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves process definition that belong to given container and has matching process id",
        "tags": [
          "Queries - processes, nodes, variables and tasks :: BPM"
        ]
      }
    },
    "/server/queries/definitions": {
      "get": {
        "description": "",
        "operationId": "getQueries",
        "parameters": [
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/query-definitions"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retruns all custom queries defined in the system",
        "tags": [
          "Custom queries :: BPM"
        ]
      }
    },
    "/server/queries/definitions/{queryName}": {
      "delete": {
        "description": "",
        "operationId": "dropQueryDefinition",
        "parameters": [
          {
            "description": "identifier of the query definition to be deleted",
            "in": "path",
            "name": "queryName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Query definition with given name not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Deletes existing query definition from the system with given queryName",
        "tags": [
          "Custom queries :: BPM"
        ]
      },
      "get": {
        "description": "",
        "operationId": "getQuery",
        "parameters": [
          {
            "description": "identifier of the query definition to be retrieved",
            "in": "path",
            "name": "queryName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/query-definition"
            }
          },
          "404": {
            "description": "Query definition with given name not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves existing query definition from the system with given queryName",
        "tags": [
          "Custom queries :: BPM"
        ]
      },
      "post": {
        "description": "",
        "operationId": "createQueryDefinition",
        "parameters": [
          {
            "description": "identifier of the query definition to be registered",
            "in": "path",
            "name": "queryName",
            "required": true,
            "type": "string"
          },
          {
            "description": "query definition represented as QueryDefinition",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "409": {
            "description": "Query with given name already exists"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Registers new query definition in the system with given queryName",
        "tags": [
          "Custom queries :: BPM"
        ]
      },
      "put": {
        "description": "",
        "operationId": "replaceQueryDefinition",
        "parameters": [
          {
            "description": "identifier of the query definition to be replaced",
            "in": "path",
            "name": "queryName",
            "required": true,
            "type": "string"
          },
          {
            "description": "query definition represented as QueryDefinition",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Replaces existing query definition or registers new if not exists in the system with given queryName",
        "tags": [
          "Custom queries :: BPM"
        ]
      }
    },
    "/server/queries/definitions/{queryName}/data": {
      "get": {
        "description": "",
        "operationId": "runQuery",
        "parameters": [
          {
            "description": "identifier of the query definition to be used for query",
            "in": "path",
            "name": "queryName",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the query mapper to be used when transforming results",
            "in": "query",
            "name": "mapper",
            "required": true,
            "type": "string"
          },
          {
            "description": "optional sort order",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "type": "object"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Query definition with given name not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Queries using query definition identified by queryName. Maps the result to concrete objects based on provided mapper.",
        "tags": [
          "Custom queries :: BPM"
        ]
      }
    },
    "/server/queries/definitions/{queryName}/filtered-data": {
      "post": {
        "description": "",
        "operationId": "runQueryFiltered",
        "parameters": [
          {
            "description": "identifier of the query definition to be used for query",
            "in": "path",
            "name": "queryName",
            "required": true,
            "type": "string"
          },
          {
            "description": "identifier of the query mapper to be used when transforming results",
            "in": "query",
            "name": "mapper",
            "required": true,
            "type": "string"
          },
          {
            "description": "optional identifier of the query builder to be used for query conditions",
            "in": "query",
            "name": "builder",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional query filter specification represented as QueryFilterSpec",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Query parameters or filter spec provide invalid conditions"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Queries using query definition identified by queryName. Maps the result to concrete objects based on provided mapper. Query is additional altered by the filter spec and/or builder",
        "tags": [
          "Custom queries :: BPM"
        ]
      }
    },
    "/server/queries/processes/definitions": {
      "get": {
        "description": "",
        "operationId": "getProcessesByFilter",
        "parameters": [
          {
            "description": "process id or name to filter process definitions",
            "in": "query",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/process-definitions"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves process definitions filtered by process id or name",
        "tags": [
          "Queries - processes, nodes, variables and tasks :: BPM"
        ]
      }
    },
    "/server/queries/processes/definitions/{pId}": {
      "get": {
        "description": "",
        "operationId": "getProcessesById",
        "parameters": [
          {
            "description": "process id to load process definition",
            "in": "path",
            "name": "pId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/process-definitions"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves process definitions filtered by process id",
        "tags": [
          "Queries - processes, nodes, variables and tasks :: BPM"
        ]
      }
    },
    "/server/queries/processes/instance/correlation/{correlationKey}": {
      "get": {
        "description": "",
        "operationId": "getProcessInstanceByCorrelationKey",
        "parameters": [
          {
            "description": "correlation key associated with process instance",
            "in": "path",
            "name": "correlationKey",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/process-instance"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves process instance by exactly matched correlation key",
        "tags": [
          "Queries - processes, nodes, variables and tasks :: BPM"
        ]
      }
    },
    "/server/queries/processes/instances": {
      "get": {
        "description": "",
        "operationId": "getProcessInstances",
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "optional process instance status (active, completed, aborted) - defaults ot active (1) only",
            "in": "query",
            "items": {
              "enum": [
                1,
                2,
                3
              ],
              "format": "int32",
              "type": "integer"
            },
            "name": "status",
            "required": false,
            "type": "array"
          },
          {
            "description": "optional process instance initiator - user who started process instance to filter process instances",
            "in": "query",
            "name": "initiator",
            "required": false,
            "type": "string"
          },
          {
            "description": "optional process name to filter process instances",
            "in": "query",
            "name": "processName",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/process-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves process instances filtered by status, initiator, processName - depending what query parameters are given. Applies pagination by default and allows to specify sorting",
        "tags": [
          "Queries - processes, nodes, variables and tasks :: BPM"
        ]
      }
    },
    "/server/queries/processes/instances/correlation/{correlationKey}": {
      "get": {
        "description": "",
        "operationId": "getProcessInstancesByCorrelationKey",
        "parameters": [
          {
            "description": "correlation key to filter process instance, can be given as partial correlation key like in starts with approach",
            "in": "path",
            "name": "correlationKey",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/process-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves process instances filtered by correlation key, retrieves all process instances that match correlationkey*. Applies pagination by default and allows to specify sorting",
        "tags": [
          "Queries - processes, nodes, variables and tasks :: BPM"
        ]
      }
    },
    "/server/queries/processes/instances/variables/{varName}": {
      "get": {
        "description": "",
        "operationId": "getProcessInstanceByVariables",
        "parameters": [
          {
            "description": "variable name to filter process instance",
            "in": "path",
            "name": "varName",
            "required": true,
            "type": "string"
          },
          {
            "description": "variable value to filter process instance, optional when filtering by name only required when filtering by name and value",
            "in": "query",
            "name": "varValue",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "optional process instance status (active, completed, aborted) - defaults ot active (1) only",
            "in": "query",
            "items": {
              "enum": [
                1,
                2,
                3
              ],
              "format": "int32",
              "type": "integer"
            },
            "name": "status",
            "required": false,
            "type": "array"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/process-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves process instances filtered by by variable or by variable and its value. Applies pagination by default and allows to specify sorting",
        "tags": [
          "Queries - processes, nodes, variables and tasks :: BPM"
        ]
      }
    },
    "/server/queries/processes/instances/{pInstanceId}": {
      "get": {
        "description": "",
        "operationId": "getProcessInstanceById",
        "parameters": [
          {
            "description": "process instance id to retrieve process instance",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "load process instance variables or not, defaults to false",
            "in": "query",
            "name": "withVars",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/process-instance"
            }
          },
          "404": {
            "description": "Process instance id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves process instance for given process instance id and optionally loads its variables",
        "tags": [
          "Queries - processes, nodes, variables and tasks :: BPM"
        ]
      }
    },
    "/server/queries/processes/instances/{pInstanceId}/nodes/instances": {
      "get": {
        "description": "",
        "operationId": "getProcessInstanceHistory",
        "parameters": [
          {
            "description": "process instance id to to retrive history for",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "include active nodes only",
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "include completed nodes only",
            "in": "query",
            "name": "completedOnly",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/node-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves node instances for given process instance. Depending on provided query parameters (activeOnly or completedOnly) will return active and/or completes nodes",
        "tags": [
          "Queries - processes, nodes, variables and tasks :: BPM"
        ]
      }
    },
    "/server/queries/processes/instances/{pInstanceId}/variables/instances": {
      "get": {
        "description": "",
        "operationId": "getVariablesCurrentState",
        "parameters": [
          {
            "description": "process instance id to load variables current state (latest value) for",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/variable-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves variables last value (from audit logs) for given process instance",
        "tags": [
          "Queries - processes, nodes, variables and tasks :: BPM"
        ]
      }
    },
    "/server/queries/processes/instances/{pInstanceId}/variables/instances/{varName}": {
      "get": {
        "description": "",
        "operationId": "getVariableHistory",
        "parameters": [
          {
            "description": "process instance id to load variable history for",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "variable name that history should be loaded for",
            "in": "path",
            "name": "varName",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/variable-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves variable history (from audit logs) for given variable name that belongs to process instance",
        "tags": [
          "Queries - processes, nodes, variables and tasks :: BPM"
        ]
      }
    },
    "/server/queries/processes/instances/{pInstanceId}/wi-nodes/instances/{workItemId}": {
      "get": {
        "description": "",
        "operationId": "getNodeInstanceForWorkItem",
        "parameters": [
          {
            "description": "process instance id that work item belongs to",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "work item id to retrieve node instance for",
            "format": "int64",
            "in": "path",
            "name": "workItemId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/node-instance"
            }
          },
          "404": {
            "description": "Node instance id not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves node instance for given process instance id and work item id",
        "tags": [
          "Queries - processes, nodes, variables and tasks :: BPM"
        ]
      }
    },
    "/server/queries/processes/{pId}/instances": {
      "get": {
        "description": "",
        "operationId": "getProcessInstancesByProcessId",
        "parameters": [
          {
            "description": "process id to filter process instance",
            "in": "path",
            "name": "pId",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "optional process instance status (active, completed, aborted) - defaults ot active (1) only",
            "in": "query",
            "items": {
              "enum": [
                1,
                2,
                3
              ],
              "format": "int32",
              "type": "integer"
            },
            "name": "status",
            "required": false,
            "type": "array"
          },
          {
            "description": "optinal process instance initiator - user who started process instance to filtr process instances",
            "in": "query",
            "name": "initiator",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/process-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves process instances filtered by process id. Applies pagination by default and allows to specify sorting",
        "tags": [
          "Queries - processes, nodes, variables and tasks :: BPM"
        ]
      }
    },
    "/server/queries/tasks/instances": {
      "get": {
        "description": "",
        "operationId": "getAllAuditTask",
        "parameters": [
          {
            "description": "optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled",
            "in": "query",
            "name": "user",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/task-summary-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves tasks, optionally filters by status and applies pagination",
        "tags": [
          "Queries - processes, nodes, variables and tasks :: BPM"
        ]
      }
    },
    "/server/queries/tasks/instances/admins": {
      "get": {
        "description": "",
        "operationId": "getTasksAssignedAsBusinessAdministratorByStatus",
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "optional task status (Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete)",
            "in": "query",
            "items": {
              "enum": [
                "Created",
                "Ready",
                "Reserved",
                "InProgress",
                "Suspended",
                "Completed",
                "Failed",
                "Error",
                "Exited",
                "Obsolete"
              ],
              "type": "string"
            },
            "name": "status",
            "required": false,
            "type": "array"
          },
          {
            "description": "optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled",
            "in": "query",
            "name": "user",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/task-summary-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves tasks assigned as business administrator, optionally filters by status and applies pagination",
        "tags": [
          "Queries - processes, nodes, variables and tasks :: BPM"
        ]
      }
    },
    "/server/queries/tasks/instances/owners": {
      "get": {
        "description": "",
        "operationId": "getTasksOwnedByStatus",
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "optional task status (Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete)",
            "in": "query",
            "items": {
              "enum": [
                "Created",
                "Ready",
                "Reserved",
                "InProgress",
                "Suspended",
                "Completed",
                "Failed",
                "Error",
                "Exited",
                "Obsolete"
              ],
              "type": "string"
            },
            "name": "status",
            "required": false,
            "type": "array"
          },
          {
            "description": "optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled",
            "in": "query",
            "name": "user",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/task-summary-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves tasks owned, optionally filters by status and applies pagination",
        "tags": [
          "Queries - processes, nodes, variables and tasks :: BPM"
        ]
      }
    },
    "/server/queries/tasks/instances/pot-owners": {
      "get": {
        "description": "",
        "operationId": "getTasksAssignedAsPotentialOwner",
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "optional task status (Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete)",
            "in": "query",
            "items": {
              "enum": [
                "Created",
                "Ready",
                "Reserved",
                "InProgress",
                "Suspended",
                "Completed",
                "Failed",
                "Error",
                "Exited",
                "Obsolete"
              ],
              "type": "string"
            },
            "name": "status",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "optional group names to include in the query",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "groups",
            "required": true,
            "type": "array"
          },
          {
            "description": "optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled",
            "in": "query",
            "name": "user",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "optional custom filter for task data",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/task-summary-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves tasks assigned as potential owner, optionally filters by status and given groups and applies pagination",
        "tags": [
          "Queries - processes, nodes, variables and tasks :: BPM"
        ]
      }
    },
    "/server/queries/tasks/instances/process/{pInstanceId}": {
      "get": {
        "description": "",
        "operationId": "getTasksByStatusByProcessInstanceId",
        "parameters": [
          {
            "description": "process instance id to filter task instances",
            "format": "int64",
            "in": "path",
            "name": "pInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "collectionFormat": "multi",
            "description": "optional task status (Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete)",
            "in": "query",
            "items": {
              "enum": [
                "Created",
                "Ready",
                "Reserved",
                "InProgress",
                "Suspended",
                "Completed",
                "Failed",
                "Error",
                "Exited",
                "Obsolete"
              ],
              "type": "string"
            },
            "name": "status",
            "required": false,
            "type": "array"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/task-summary-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves tasks associated with given process instance, optionally filters by status and applies pagination",
        "tags": [
          "Queries - processes, nodes, variables and tasks :: BPM"
        ]
      }
    },
    "/server/queries/tasks/instances/variables/{varName}": {
      "get": {
        "description": "",
        "operationId": "getTasksByVariables",
        "parameters": [
          {
            "description": "name of the variable used to fiter tasks",
            "in": "path",
            "name": "varName",
            "required": true,
            "type": "string"
          },
          {
            "description": "value of the variable used to fiter tasks, optional when filtering only by name, required when filtering by both name and value",
            "in": "query",
            "name": "varValue",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "optional task status (Created, Ready, Reserved, InProgress, Suspended, Completed, Failed, Error, Exited, Obsolete)",
            "in": "query",
            "items": {
              "enum": [
                "Created",
                "Ready",
                "Reserved",
                "InProgress",
                "Suspended",
                "Completed",
                "Failed",
                "Error",
                "Exited",
                "Obsolete"
              ],
              "type": "string"
            },
            "name": "status",
            "required": false,
            "type": "array"
          },
          {
            "description": "optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled",
            "in": "query",
            "name": "user",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/task-summary-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves tasks by variable name and optionally by variable value, optionally filters by status and applies pagination",
        "tags": [
          "Queries - processes, nodes, variables and tasks :: BPM"
        ]
      }
    },
    "/server/queries/tasks/instances/workitem/{workItemId}": {
      "get": {
        "description": "",
        "operationId": "getTaskByWorkItemId",
        "parameters": [
          {
            "description": "work item id to load task associated with",
            "format": "int64",
            "in": "path",
            "name": "workItemId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/task-instance"
            }
          },
          "404": {
            "description": "Task not found for given work item id"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves task by associated work item id",
        "tags": [
          "Queries - processes, nodes, variables and tasks :: BPM"
        ]
      }
    },
    "/server/queries/tasks/instances/{tInstanceId}": {
      "get": {
        "description": "",
        "operationId": "getTaskById",
        "parameters": [
          {
            "description": "task id to load task instance",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/task-instance"
            }
          },
          "404": {
            "description": "Task not found for given id"
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves task by task id",
        "tags": [
          "Queries - processes, nodes, variables and tasks :: BPM"
        ]
      }
    },
    "/server/queries/tasks/instances/{tInstanceId}/events": {
      "get": {
        "description": "",
        "operationId": "getTaskEvents",
        "parameters": [
          {
            "description": "task id to load task events for",
            "format": "int64",
            "in": "path",
            "name": "tInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "optional pagination - at which page to start, defaults to 0 (meaning first)",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "optional pagination - size of the result, defaults to 10",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional sort column, no default",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "optional sort direction (asc, desc) - defaults to asc",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/task-event-instance-list"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves task events for given task id and applies pagination",
        "tags": [
          "Queries - processes, nodes, variables and tasks :: BPM"
        ]
      }
    },
    "/server/state": {
      "get": {
        "description": "",
        "operationId": "getServerState",
        "parameters": [],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/response"
            }
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "summary": "Retrieves server state - configuration that the server is currently running with",
        "tags": [
          "KIE Server :: Core"
        ]
      }
    }
  },
  "swagger": "2.0",
  "tags": [
    {
      "name": "Administration of cases :: Case Management"
    },
    {
      "name": "Queries - case definitions and instances :: Case Management"
    },
    {
      "name": "Case instances :: Case Management"
    },
    {
      "name": "KIE Server Script :: Core"
    },
    {
      "name": "KIE Server :: Core"
    },
    {
      "name": "Decision Service :: DMN"
    },
    {
      "name": "Rules evaluation :: BRM"
    },
    {
      "name": "Process and task definitions :: BPM"
    },
    {
      "name": "Documents :: BPM"
    },
    {
      "name": "Asynchronous jobs :: BPM"
    },
    {
      "name": "Process instances :: BPM"
    },
    {
      "name": "Custom queries :: BPM"
    },
    {
      "name": "Queries - processes, nodes, variables and tasks :: BPM"
    },
    {
      "name": "User task operations and queries :: BPM"
    },
    {
      "name": "Process instances administration :: BPM"
    },
    {
      "name": "User tasks administration :: BPM"
    },
    {
      "name": "Process and task forms :: BPM"
    },
    {
      "name": "Process definition and instance images :: BPM"
    },
    {
      "name": "Planning and solvers :: BRP"
    }
  ]
}
